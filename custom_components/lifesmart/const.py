"""由 @MapleEve 实现的 LifeSmart 集成常量模块。

此文件定义了所有与 LifeSmart 平台交互所需的硬编码常量、设备类型代码、API命令码、
以及用于在 Home Assistant 和 LifeSmart 之间转换数据的映射。

维护此文件的准确性和清晰度对于整个集成的稳定和可扩展性至关重要。
"""

from homeassistant.components.climate.const import (
    HVACMode,
    FAN_AUTO,
    FAN_HIGH,
    FAN_LOW,
    FAN_MEDIUM,
)
from homeassistant.const import Platform

# ================= 重要技术说明 (Critical Technical Documentation) =================

"""
⚠️ 重要：LifeSmart设备动态分类和IO口处理技术说明 ⚠️

本集成支持LifeSmart平台的全系列智能设备，包含复杂的动态设备分类逻辑和精确的IO口控制协议。
以下是关键技术要点，修改时务必理解这些规则：

1. 【动态设备分类规则】
   某些设备(如SL_P通用控制器、SL_NATURE超能面板)根据配置参数动态决定功能：
   - SL_P通用控制器：根据P1口的工作模式(P1>>24)&0xE决定是开关、窗帘还是传感器
   - SL_NATURE超能面板：根据P5口值(P5&0xFF)决定是开关版(1)还是温控版(3/6)
   - 动态分类必须在helpers.py中实现，不能仅依赖设备类型判断

2. 【IO口数据格式和位运算规则】
   LifeSmart使用type和val两个字段表示IO口状态：
   - type字段：奇偶性(type&1)表示开关状态，1开启/0关闭
   - val字段：具体数值，含义因设备而异
   - 32位复合值：高位可能包含配置、低位包含状态(如P1工作模式)
   - 浮点数编码：部分设备使用IEEE754格式存储浮点数到32位整数

3. 【设备版本处理(VERSIONED_DEVICE_TYPES)】
   某些设备需要根据fullCls字段区分版本：
   - SL_SW_DM1: V1是动态调光开关，V2是星玉调光开关(可控硅)
   - SL_SC_BB: V1是基础按键，V2是高级按键(支持双击长按)
   - SL_LK_DJ: V1是C210门锁，V2是C200门锁
   - 版本区分逻辑在helpers.py中的get_device_version()实现

4. 【特殊IO口命名和控制逻辑】
   不同设备系列使用不同的IO口命名规则：
   - 开关面板：L1/L2/L3 + dark/bright指示灯控制
   - 通用控制器：P1-P10，功能因工作模式而异
   - 温控设备：tT目标温度、T当前温度、MODE/F风速等
   - 灯光设备：RGBW颜色、DYN动态效果、P1/P2亮度色温等

5. 【多平台设备处理】
   单个物理设备可能创建多个Home Assistant实体：
   - SL_NATURE温控版：同时创建climate实体(温控)和sensor实体(温度)
   - SL_JEMA通用控制器：根据工作模式创建对应实体+P8/P9/P10独立开关
   - 灯光设备：可能同时支持switch和light平台

6. 【命令下发协议(CMD_TYPE_*)】
   不同的控制命令使用不同的type值：
   - CMD_TYPE_ON(0x81)/CMD_TYPE_OFF(0x80)：基础开关控制
   - CMD_TYPE_SET_VAL(0xCF)：设置数值(亮度、位置等)
   - CMD_TYPE_SET_RAW(0xFF)：设置原始值(颜色、配置等)
   - CMD_TYPE_SET_CONFIG(0xCE)：设置配置参数
   - 温度设置有专用命令码，避免精度丢失

7. 【网络协议和数据同步】
   - WebSocket实时推送：_schg消息格式为 agt/ep/device_id/m/io_key
   - API轮询：定期获取全量设备列表，处理设备增删
   - 数据归一化：normalize_device_names()处理{$EPN}等占位符
   - 乐观更新：UI立即响应用户操作，失败时回滚状态

8. 【设备平台映射系统】
   基于IO特征的动态平台判断，取代传统的设备类型聚合列表：
   - get_device_platform_mapping()：根据设备IO特征获取支持的平台
   - MULTI_PLATFORM_DEVICE_MAPPING：多平台设备IO口映射
   - STAR_SERIES_IO_MAPPING：恒星系列不同键数的IO口映射
   - 支持单设备多平台，避免设备重复定义问题

9. 【兼容性处理】
   - 向后兼容：保留已废弃的设备类型定义，避免现有配置失效
   - 设备别名：某些设备有多个型号名称，统一映射到标准类型
   - 缺失数据防护：使用safe_get()防止KeyError，提供默认值

10. 【测试和验证】
    - Mock架构：测试时精准Mock网络和线程组件，保留业务逻辑验证
    - 设备工厂：test_utils.py提供统一的测试设备数据生成
    - 全环境测试：支持Python 3.10-3.13和HA 2022.10-2024.12版本

修改设备类型定义或IO口逻辑时，务必：
✓ 理解设备的完整工作流程和数据格式
✓ 考虑动态分类和版本兼容性
✓ 更新对应的helpers.py逻辑
✓ 运行完整测试确保无回归
✓ 参考官方文档`docs/LifeSmart 智慧设备规格属性说明.md`

❌ 切勿仅凭设备名称判断功能
❌ 切勿破坏现有的位运算逻辑
❌ 切勿删除看似"冗余"的设备类型定义
❌ 切勿忽略浮点数和复合值的特殊处理
"""

# ================= 核心常量 (Core Constants) =================
DOMAIN = "lifesmart"
MANUFACTURER = "LifeSmart"

# --- JSON 数据键名 ---
# 这些常量用于从LifeSmart API响应的JSON数据中安全地提取值。
HUB_ID_KEY = "agt"  # 智慧中心 (网关) 的唯一标识符
DEVICE_ID_KEY = "me"  # 设备的唯一标识符
DEVICE_TYPE_KEY = "devtype"  # 设备的类型代码，用于区分不同种类的设备
DEVICE_FULLCLS_KEY = "fullCls"  # 包含版本号的完整设备类型，用于区分设备版本
DEVICE_NAME_KEY = "name"  # 设备的用户自定义名称
DEVICE_DATA_KEY = "data"  # 包含设备所有IO口状态的字典
DEVICE_VERSION_KEY = "ver"  # 设备的固件或软件版本
SUBDEVICE_INDEX_KEY = "idx"  # 子设备或IO口的索引键，如 'L1', 'P1'


# ================= WebSocket 及更新机制常量 =================
# --- Home Assistant 信号 (Dispatcher Signals) ---
UPDATE_LISTENER = "update_listener"  # 用于在 hass.data 中存储配置更新监听器的键
LIFESMART_STATE_MANAGER = (
    "lifesmart_wss"  # 用于在 hass.data 中存储 WebSocket 管理器实例的键
)
LIFESMART_SIGNAL_UPDATE_ENTITY = "lifesmart_updated"  # 用于在集成内部进行事件通知的信号

# ================= 配置常量 (Configuration Constants) =================
# 这些常量用于在 config_flow 和 __init__.py 中处理用户的配置数据。
CONF_LIFESMART_APPKEY = "appkey"
CONF_LIFESMART_APPTOKEN = "apptoken"
CONF_LIFESMART_USERTOKEN = "usertoken"
CONF_LIFESMART_AUTH_METHOD = "auth_method"
CONF_LIFESMART_USERPASSWORD = "userpassword"
CONF_LIFESMART_USERID = "userid"
CONF_EXCLUDE_ITEMS = "exclude"
CONF_EXCLUDE_AGTS = "exclude_agt"
CONF_AI_INCLUDE_AGTS = "ai_include_agt"
CONF_AI_INCLUDE_ITEMS = "ai_include_me"

# --- AI 类型常量 ---
CON_AI_TYPE_SCENE = "scene"
CON_AI_TYPE_AIB = "aib"
CON_AI_TYPE_GROUP = "grouphw"
CON_AI_TYPES = {
    CON_AI_TYPE_SCENE,
    CON_AI_TYPE_AIB,
    CON_AI_TYPE_GROUP,
}
AI_TYPES = "ai"

# ================= 插座系列 (Outlet Series) =================
# 按功能分类：基础插座、计量插座（避免重复定义）

# --- 基础插座系列 (Basic Smart Plugs) ---
BASIC_OUTLET_TYPES = {
    # 智慧插座 SL_OL - 基础O口开关控制
    # IO口: O(开关 RW)
    #   数据类型：整数开关状态
    #   属性值描述：type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #   下发命令：打开type=0x81,val=1; 关闭type=0x80,val=0
    "SL_OL",
    "SL_OL_3C",  # 智慧插座(3C版) - 同SL_OL功能
    "SL_OL_DE",  # 德标插座 - 同SL_OL功能
    "SL_OL_UK",  # 英标插座 - 同SL_OL功能
    "SL_OL_UL",  # 美标插座 - 同SL_OL功能
    # Wi-Fi插座 OD_WE_OT1 - P1口开关控制
    # IO口: P1(开关 RW)
    #   数据类型：整数开关状态
    #   属性值描述：type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #   下发命令：打开type=0x81,val=1; 关闭type=0x80,val=0
    "OD_WE_OT1",
}

# --- 多功能插座系列 (Multi-function Outlet with Light) ---
# ⚠️ 重要：这些设备同时支持开关和灯光平台
MULTI_FUNCTION_OUTLET_TYPES = {
    # 入墙插座 SL_OL_W - 兼具开关功能和指示灯控制
    # IO口: L1(开关 RW) dark(关状态指示灯亮度 RW) bright(开状态指示灯亮度 RW)
    #   开关功能：L1口控制插座通断
    #   灯光功能：dark/bright控制指示灯RGBW颜色和动态效果
    #   平台支持：switch + light (由helpers.py动态检测)
    "SL_OL_W",
}

# --- 计量插座系列 (Power Metering Outlets) ---
METERING_OUTLET_TYPES = {
    # 计量插座 SL_OE_3C - 开关+电量监测
    # IO口: P1(开关 RW) P2(用电量 R) P3(功率 R) P4(功率门限 RW)
    #
    # P1(开关 RW)
    #   数据类型：整数开关状态
    #   属性值描述：type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #   下发命令：打开type=0x81,val=1; 关闭type=0x80,val=0
    #
    # P2(用电量 R)
    #   数据类型：IEEE754浮点数的32位整数表示
    #   属性值描述：为累计用电量，val值为IEEE754浮点数的32位整数表示，v值为浮点数，单位为度(kwh)
    #   数据转换：v值可以直接使用，若不存在v值则需要手动转换IEEE754格式
    #   示例：1024913643表示浮点值0.03685085，参考附录3.4 IO值浮点类型说明
    #
    # P3(功率 R)
    #   数据类型：IEEE754浮点数的32位整数表示
    #   属性值描述：为当前负载功率，v值为浮点数，单位为w
    #   数据转换：同P2，需要IEEE754浮点数转换
    #
    # P4(功率门限 RW)
    #   数据类型：整数功率门限值
    #   属性值描述：功率门限，用电保护，值为整数，超出门限则会断电，单位为w
    #   下发命令：使能type=0x81,val=1; 不使能type=0x80,val=0
    #            使能并设置门限type=207,val=门限值; 不使能并设置门限type=206,val=门限值
    #   平台支持：switch + sensor (P2/P3电量功率传感器)
    "SL_OE_3C",
    "SL_OE_DE",  # 计量插座德标 - 同SL_OE_3C功能
    "SL_OE_W",  # 计量插座入墙版 - 同SL_OE_3C功能
}

# ================= 其他设备类型 =================
# --- 超级碗 (SPOT) ---
SPOT_TYPES = {
    # 超级碗（基础版,蓝牙版）
    # IO口: RGBW(RGB颜色值 RW) DYN(动态颜色值 RW)
    # 注意: DYN不能单独下发,必须与RGBW一起下发
    "MSL_IRCTL",
    # 超级碗（闪联版）
    # IO口: RGB(RGB颜色值 RW) - 当White>0时表示动态模式
    "OD_WE_IRCTL",
    # 超级碗（CoSS版）
    # IO口: RGB(RGB颜色值 RW) - 当White>0时表示动态模式
    "SL_SPOT",
    # 红外模块 / 超级碗（Mini版）
    # IO口: 红外控制功能,无灯光控制时不需关注IO属性
    # 注意: SL_P_IR与SL_LI_IR相同
    "SL_P_IR",
    # 红外模块 / 超级碗（Mini版 V2）- 922射频版本
    # IO口: P2(配对按钮状态 R) - 仅指示按钮是否按下,不指示配对状态
    # 注意: SL_P_IR_V2为版本标识符,通过fullCls="SL_P_IR_V2"区分版本
    # "SL_P_IR_V2",  # 移除版本设备,使用VERSIONED_DEVICE_TYPES处理
}

# --- 通用控制器 ---
# ⚠️ 多功能动态设备：根据P1工作模式动态分类到不同平台
# 工作模式(P1>>24)&0xE: 0=自由模式(二元传感器) 2/4=窗帘控制 8/10=开关控制
GENERIC_CONTROLLER_TYPES = {
    # 通用控制器 (多功能动态分类设备)
    # ⚠️ 重要：此设备根据P1工作模式动态分类到不同平台
    #
    # IO口详细说明：
    # P1(控制参数 RW) - 32位控制参数，包含工作模式和延时配置
    #   数据类型：32位整数
    #   位字段结构：
    #     bit0-23: 延时参数(24位) - 具体含义根据工作模式而定
    #       - 自由模式(0): 延时时间，单位100ms，范围0-16777215
    #       - 窗帘模式(2/4): 行程时间，单位100ms，全开全关所需时间
    #       - 开关模式(8/10): 点动延时，单位100ms，0表示开关式，非0表示点动式
    #     bit24-27: 工作模式(4位) - 决定设备功能类型
    #       0 = 自由模式 (binary_sensor平台，P5/P6/P7为状态输入)
    #       2 = 二线窗帘 (cover平台，P2开/P3关)
    #       4 = 三线窗帘 (cover平台，P2开/P3关/P4停)
    #       8 = 三路开关 (switch平台，P2/P3/P4为开关输出)
    #       10 = 三路开关新版 (switch平台，P2/P3/P4为开关输出)
    #     bit28-31: 保留位(4位) - 未使用，应设为0
    #   取值逻辑：val为完整32位值，v值同val值
    #   示例：val=0x02001388 表示二线窗帘模式，行程时间50秒
    #
    # P2(Ctrl1 RW) - 第一路控制输出
    #   数据类型：整数控制位
    #   功能说明：
    #     - 自由模式：无效
    #     - 窗帘模式：开启控制 (type&1==1输出有效/0无效)
    #     - 开关模式：第一路开关 (type&1==1开启/0关闭)
    #   取值范围：type=0x80(关)/0x81(开)，val通常为0或1
    #
    # P3(Ctrl2 RW) - 第二路控制输出
    #   数据类型：整数控制位
    #   功能说明：
    #     - 自由模式：无效
    #     - 窗帘模式：关闭控制 (type&1==1输出有效/0无效)
    #     - 开关模式：第二路开关 (type&1==1开启/0关闭)
    #   取值范围：type=0x80(关)/0x81(开)，val通常为0或1
    #
    # P4(Ctrl3 RW) - 第三路控制输出
    #   数据类型：整数控制位
    #   功能说明：
    #     - 自由模式：无效
    #     - 三线窗帘模式：停止控制 (type&1==1输出有效/0无效)
    #     - 开关模式：第三路开关 (type&1==1开启/0关闭)
    #   取值范围：type=0x80(关)/0x81(开)，val通常为0或1
    #
    # P5(Status1 R) - 第一路状态输入 (仅自由模式有效)
    #   数据类型：整数状态位
    #   功能说明：外部状态输入检测
    #   取值逻辑：type&1==1有信号/0无信号
    #   val值：信号强度或持续时间，具体含义由外接设备决定
    #
    # P6(Status2 R) - 第二路状态输入 (仅自由模式有效)
    #   数据类型：整数状态位
    #   功能说明：外部状态输入检测
    #   取值逻辑：type&1==1有信号/0无信号
    #   val值：信号强度或持续时间，具体含义由外接设备决定
    #
    # P7(Status3 R) - 第三路状态输入 (仅自由模式有效)
    #   数据类型：整数状态位
    #   功能说明：外部状态输入检测
    #   取值逻辑：type&1==1有信号/0无信号
    #   val值：信号强度或持续时间，具体含义由外接设备决定
    #
    # 动态分类逻辑：
    #   work_mode = (P1.val >> 24) & 0xE
    #   if work_mode == 0: 创建binary_sensor实体(P5/P6/P7)
    #   elif work_mode in {2,4}: 创建cover实体
    #   elif work_mode in {8,10}: 创建switch实体(P2/P3/P4)
    "SL_P",
    # 通用控制器HA (多功能动态分类设备)
    # ⚠️ 重要：此设备是通用控制器的HA增强版，具有更多IO口
    #
    # IO口详细说明：
    # P1(控制参数 RW) - 32位控制参数，包含工作模式和延时配置(同SL_P)
    #   数据类型：32位整数
    #   位字段结构：同SL_P的P1口，完全相同的编码方式
    #   取值逻辑：val为完整32位值，v值同val值
    #
    # P2(Ctrl1 RW) - 第一路控制输出
    #   数据类型：整数控制位
    #   功能说明：同SL_P的P2口 (type&1==1输出有效/0无效)
    #   取值范围：type=0x80(关)/0x81(开)，val通常为0或1
    #
    # P3(Ctrl2 RW) - 第二路控制输出
    #   数据类型：整数控制位
    #   功能说明：同SL_P的P3口 (type&1==1输出有效/0无效)
    #   取值范围：type=0x80(关)/0x81(开)，val通常为0或1
    #
    # P4(Ctrl3 RW) - 第三路控制输出
    #   数据类型：整数控制位
    #   功能说明：同SL_P的P4口 (type&1==1输出有效/0无效)
    #   取值范围：type=0x80(关)/0x81(开)，val通常为0或1
    #
    # P5(Status1 R) - 第一路状态输入 (仅自由模式有效)
    #   数据类型：整数状态位
    #   功能说明：同SL_P的P5口 (type&1==1有信号/0无信号)
    #   val值：信号强度或持续时间
    #
    # P6(Status2 R) - 第二路状态输入 (仅自由模式有效)
    #   数据类型：整数状态位
    #   功能说明：同SL_P的P6口 (type&1==1有信号/0无信号)
    #   val值：信号强度或持续时间
    #
    # P7(Status3 R) - 第三路状态输入 (仅自由模式有效)
    #   数据类型：整数状态位
    #   功能说明：同SL_P的P7口 (type&1==1有信号/0无信号)
    #   val值：信号强度或持续时间
    #
    # P8(HA1 RW) - 第一路HA独立开关端口
    #   数据类型：整数控制位
    #   功能说明：独立于P1工作模式的开关控制，专为HA平台设计
    #   取值逻辑：type&1==1开启/0关闭 (不受P1工作模式影响)
    #   取值范围：type=0x80(关)/0x81(开)，val通常为0或1
    #   特殊说明：此口始终作为开关功能，无论P1设置为何种工作模式
    #
    # P9(HA2 RW) - 第二路HA独立开关端口
    #   数据类型：整数控制位
    #   功能说明：独立于P1工作模式的开关控制
    #   取值逻辑：type&1==1开启/0关闭 (不受P1工作模式影响)
    #   取值范围：type=0x80(关)/0x81(开)，val通常为0或1
    #
    # P10(HA3 RW) - 第三路HA独立开关端口
    #   数据类型：整数控制位
    #   功能说明：独立于P1工作模式的开关控制
    #   取值逻辑：type&1==1开启/0关闭 (不受P1工作模式影响)
    #   取值范围：type=0x80(关)/0x81(开)，val通常为0或1
    #
    # 动态分类逻辑：同SL_P，但额外创建P8/P9/P10的独立开关实体
    #   P8/P9/P10始终创建为switch实体，不受P1工作模式影响
    "SL_JEMA",
}
# --- 摄像头 ---
CAMERA_TYPES = {
    # 通用摄像头设备类型
    # IO口详细说明：
    # M(移动检测 R) - 运动感应状态
    #   数据类型：整数状态位
    #   取值逻辑：0无移动/1有移动
    #   val值：移动检测的灵敏度级别或持续时间
    #   触发机制：PIR传感器检测到运动时置1，一定时间后自动清零
    #
    # V(电压 R) - 设备电量信息 (仅FRAME设备)
    #   数据类型：整数电压值
    #   取值范围：val为原始电压值(通常2000-4200,对应2.0V-4.2V)
    #   转换逻辑：v为电量百分比[0,100]，通过电压-百分比映射表转换
    #   低电报警：v<20时应提示更换电池
    #
    # CFST(摄像头状态 R) - 摄像头功能状态位掩码
    #   数据类型：整数位掩码
    #   位字段结构：
    #     bit0: 是否有外接电源 (1有外接电源/0电池供电)
    #     bit1: 是否为旋转云台 (1是云台摄像头/0固定摄像头)
    #     bit2: 是否正在旋转 (1正在旋转/0静止) - 仅FRAME设备
    #     bit3-7: 保留位，未使用
    #   取值示例：val=0x07表示外接供电+云台+正在旋转
    "cam",
    # FRAME摄像头
    # IO口: M(移动检测 R) V(电压 R) CFST(摄像头状态 R)
    "LSCAM:LSCAMV1",
    # 户外摄像头EZ1
    # IO口: 摄像头基础功能
    "LSCAM:LSICAMEZ1",
    # 户外摄像头EZ2
    # IO口: 摄像头基础功能
    "LSCAM:LSICAMEZ2",
    # 高清摄像头系列(根据ModelKey区分具体规格)
    # IO口: 摄像头基础功能
    "LSCAM:LSICAMGOS1",
    # 视频门锁摄像头V1
    # IO口: 摄像头基础功能
    "LSCAM:LSLKCAMV1",
}

# ================= 开关系列 (Switch Series) =================
# 涵盖所有单火、零火、调光、场景、窗帘等开关面板
# --- 带电压的恒星/辰星/极星开关系列 (Nature/Star Switch Series) ---
# ⚠️ 重要：所有恒星/辰星/极星设备使用统一的IO映射机制
# 电量IO口映射：单键->P2, 双键->P3, 三键->P4
STAR_SERIES_TYPES = {
    # 恒星/辰星/极星开关(单键) SL_SW_ND1 / SL_MC_ND1
    # IO口: P1(开关 RW) P2(电量 R)
    #   P1功能：type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #           P1表示第一路开关控制口
    #   下发命令：打开type=0x81,val=1; 关闭type=0x80,val=0
    #   P2电量：val值表示原始电压值, v值将表示当前剩余电量百分比，值范围[0,100]
    #   电池管理：根据val电压值换算的电量百分比，低电时需要更换电池
    #   版本信息：极星开关系列其fullCls的版本号为V2，例如SL_SW_ND1_V2指明其为极星1联开关
    "SL_SW_ND1",  # 恒星/辰星/极星开关(单键)
    "SL_MC_ND1",  # 恒星/辰星/极星开关伴侣(单键)
    # 恒星/辰星/极星开关(双键) SL_SW_ND2 / SL_MC_ND2
    # IO口: P1,P2(开关 RW) P3(电量 R)
    #   P1/P2功能：type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #               P1表示第一路开关控制口, P2表示第二路开关控制口
    #   下发命令：打开type=0x81,val=1; 关闭type=0x80,val=0
    #   P3电量：val值表示原始电压值, v值将表示当前剩余电量百分比，值范围[0,100]
    #   版本信息：极星开关系列其fullCls的版本号为V2，例如SL_SW_ND2_V2指明其为极星2联开关
    "SL_SW_ND2",  # 恒星/辰星/极星开关(双键)
    "SL_MC_ND2",  # 恒星/辰星/极星开关伴侣(双键)
    # 恒星/辰星/极星开关(三键) SL_SW_ND3 / SL_MC_ND3
    # IO口: P1,P2,P3(开关 RW) P4(电量 R)
    #   P1/P2/P3功能：type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #                  P1表示第一路开关控制口, P2表示第二路开关控制口, P3表示第三路开关控制口
    #   下发命令：打开type=0x81,val=1; 关闭type=0x80,val=0
    #   P4电量：val值表示原始电压值, v值将表示当前剩余电量百分比，值范围[0,100]
    #   版本信息：极星开关系列其fullCls的版本号为V2，例如SL_SW_ND3_V2指明其为极星3联开关
    "SL_SW_ND3",  # 恒星/辰星/极星开关(三键)
    "SL_MC_ND3",  # 恒星/辰星/极星开关伴侣(三键)
}

# --- 需要根据fullCls区分版本的设备类型 ---
# 注意：只有在IO口和功能上真正有差异的设备才需要版本区分
VERSIONED_DEVICE_TYPES = {
    # 调光开关系列 - 根据fullCls区分不同版本功能
    "SL_SW_DM1": {
        # SL_SW_DM1_V1为动态调光开关 - 具有传感器和智能控制功能
        # IO口: P1(开关+亮度 RW) P2(指示灯 RW) P3(移动检测 R) P4(环境光照 R) P5(调光设置 RW) P6(动态设置 RW)
        "V1": "motion_dimmer",
        # SL_SW_DM1_V2为星玉调光开关(可控硅) - 基础调光功能
        # IO口: P1(开关+亮度 RW) P2(指示灯亮度 RW)
        "V2": "triac_dimmer",
    },
    # 按钮开关版本区分 - 基于不同的按键检测能力
    "SL_SC_BB": {
        # SL_SC_BB_V1基础随心按键 - 简单按键检测
        # IO口: V(电量 R) B(按键状态 R: 0=未按下 1=按下)
        "V1": "cube_clicker_basic",
        # SL_SC_BB_V2高级随心按键 - 支持复杂手势识别
        # IO口: P1(按键状态 R: 1=单击 2=双击 255=长按) P2(电量 R)
        "V2": "cube_clicker_advanced",
    },
    # 智能门锁版本区分 - 不同型号不同功能
    "SL_LK_DJ": {
        # 智能门锁C210
        "V1": "smart_lock_c210",
        # 智能门锁C200
        "V2": "smart_lock_c200",
    },
}

SUPPORTED_SWITCH_TYPES = {
    # === 开关控制器系列 (Switch Controller Series) ===
    # 开关智控器 SL_S
    # IO口: P2(开关 RW)
    #   属性值描述: 通用开关控制
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0
    "SL_S",
    # 九路开关控制器 SL_P_SW
    # IO口: P1,P2,P3,P4,P5,P6,P7,P8,P9(开关 RW)
    #   属性值描述: type&1==1表示处于打开状态; type&1==0表示处于关闭状态
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0
    #   特殊功能: 支持开关打开并持续设置时间后自动关闭功能(模拟遥控器按键)
    #            设置功能参数: type=0x89, val=持续时长(单位100ms)
    #            示例: P1打开持续1s自动关闭 type=0x89,val=10
    #                 P1打开持续200ms自动关闭 type=0x89,val=2
    #                 P1打开持续2.5s自动关闭 type=0x89,val=25
    #   注意: 设置时长精度为100ms,当val=1时时长可能会小于100ms
    #        仅新版本支持此功能,非新版本下发以上命令不生效
    "SL_P_SW",
    # 星玉情景面板 SL_SW_NS6 (Nature Switch Scene Panel)
    # IO口: P1~P6(情景开关 RW)
    #   属性值描述: type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0
    # P7(开关控制器配置 RW) - 面板六个按键功能配置参数
    #   属性值描述: val值为面板上六个按键的功能配置参数
    #   bit0-bit3:设置P1; bit4-bit7:设置P2; bit8-bit11:设置P3
    #   bit12-bit15:设置P4; bit16-bit19:设置P5; bit20-bit23:设置P6
    #   每4个bit分别代表对应面板按钮设置,按每4个bit值定义功能:
    #   值为0:表示自复位开关,默认5s自动关
    #   值为1,2,3:分别对应面板物理设备上的继电器L1,该P的开关操作就是操作继电器L1的开关
    #   值为4~14:表示自复位开关自定义延迟关时间,若x表示当前区间值,延迟关时间=(5+(x-3)*15)秒
    #   值为15:表示通用开关,不会自动关
    #   当P1~P6设置为绑定继电器时,当前为普通开关控制器
    #   下发命令: 下发配置type=0xff,val=bit0~bit23按对应Px配置值合并的数值
    #   注意: 建议将断电参数设置为nonVolatile=1,否则该配置会在设备断电后丢失
    "SL_SW_NS6",
    # === 传统开关系列 (Traditional Switch Series) ===
    # 流光开关(单键)/触摸开关 SL_SW_IF1 / SL_SW_FE1 / SL_SW_CP1 / SL_OL_W / SL_SW_RC1
    # IO口: L1(开关 RW)
    #   属性值描述: type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #               L1表示第一路开关控制口
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0
    # dark(关状态时指示灯亮度 RW)
    #   属性值描述: type&1==1表示打开; type&1==0表示关闭
    #               val表示指示灯亮度值,定义如下:
    #               bit0~bit7:Blue, bit8~bit15:Green, bit16~bit23:Red, bit24~bit31:white
    #               (当White>0时表示动态模式)具体动态值请参考附录3.1动态颜色(DYN)定义
    #   下发命令: 开灯type=0x81,val=1; 关灯type=0x80,val=0
    #            开灯并设置颜色或动态值type=0xff,val=颜色或动态值
    #            关灯并设置颜色值或动态值type=0xfe,val=颜色或动态值
    # bright(开状态时指示灯亮度 RW) - 同dark定义
    "SL_SW_IF1",
    # 流光开关(双键)/触摸开关 SL_SW_IF2 / SL_SW_FE2 / SL_SW_CP2 / SL_SW_RC2
    # IO口: L1,L2(开关 RW)
    #   属性值描述: type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #               L1表示第一路开关控制口, L2表示第二路开关控制口
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0
    # dark1,dark2(关状态时指示灯亮度 RW) - 同单键版本dark定义
    # bright1,bright2(开状态时指示灯亮度 RW) - 同单键版本bright定义
    "SL_SW_IF2",
    # 流光开关(三键)/触摸开关 SL_SW_IF3 / SL_SF_IF3 / SL_SF_CP3 / SL_SF_RC3
    # IO口: L1,L2,L3(开关 RW)
    #   属性值描述: type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #               L1表示第一路开关控制口, L2表示第二路开关控制口, L3表示第三路开关控制口
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0
    # dark1,dark2,dark3(关状态时指示灯亮度 RW)
    #   属性值描述: type&1==1表示打开; type&1==0表示关闭
    #               val表示指示灯亮度值，RGBW颜色值定义如下:
    #               bit0~bit7:Blue bit8~bit15:Green bit16~bit23:Red bit24~bit31:White
    #               当White>0时表示动态模式，具体动态值请参考DYN定义
    #   下发命令: 开灯type=0x81,val=1; 关灯type=0x80,val=0;
    #            开灯并设置颜色或动态值type=0xff,val=颜色或动态值
    #            关灯并设置颜色值或动态值type=0xfe,val=颜色或动态值
    # bright1,bright2,bright3(开状态时指示灯亮度 RW)
    #   属性值描述: type&1==1表示打开; type&1==0表示关闭
    #               val表示指示灯亮度值，RGBW颜色值定义如下:
    #               bit0~bit7:Blue bit8~bit15:Green bit16~bit23:Red bit24~bit31:White
    #               当White>0时表示动态模式，具体动态值请参考DYN定义
    #   下发命令: 开灯type=0x81,val=1; 关灯type=0x80,val=0;
    #            开灯并设置颜色或动态值type=0xff,val=颜色或动态值
    #            关灯并设置颜色值或动态值type=0xfe,val=颜色或动态值
    "SL_SW_IF3",
    # 塞纳/格致开关(单键) SL_SW_FE1
    # IO口: L1(开关 RW) dark(关状态指示灯亮度 RW) bright(开状态指示灯亮度 RW)
    #   IO口功能定义完全同SL_SW_IF1,参考上述详细说明
    "SL_SW_FE1",
    # 塞纳/格致开关(双键) SL_SW_FE2
    # IO口: L1,L2(开关 RW) dark1,dark2(关状态指示灯亮度 RW) bright1,bright2(开状态指示灯亮度 RW)
    #   IO口功能定义完全同SL_SW_IF2,参考上述详细说明
    "SL_SW_FE2",
    # 触摸开关/极星开关(零火版) SL_SW_RC
    # IO口: L1,L2,L3(开关 RW)
    #   属性值描述: type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #               L1表示第一路开关控制口, L2表示第二路开关控制口, L3表示第三路开关控制口
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0
    # dark(关状态时指示灯亮度 RW)
    #   属性值描述: type&1==1表示打开; type&1==0表示关闭
    #               val表示指示灯亮度值,取值范围:0~1023
    #   下发命令: 开灯type=0x81,val=1; 关灯type=0x80,val=0
    #            开灯并设置亮度值type=0xff,val=亮度值; 关灯并设置亮度值type=0xfe,val=亮度值
    # bright(开状态时指示灯亮度 RW) - 同dark定义
    "SL_SW_RC",
    # === 单火开关系列 (Single Fire Switch Series) ===
    # 单火流光开关(单键) SL_SF_IF1
    # IO口: L1(开关 RW) dark(关状态指示灯亮度 RW) bright(开状态指示灯亮度 RW)
    #   IO口功能定义完全同SL_SW_IF1,参考上述详细说明
    "SL_SF_IF1",
    # 单火流光开关(双键) SL_SF_IF2
    # IO口: L1,L2(开关 RW) dark1,dark2(关状态指示灯亮度 RW) bright1,bright2(开状态指示灯亮度 RW)
    #   IO口功能定义完全同SL_SW_IF2,参考上述详细说明
    "SL_SF_IF2",
    # 单火流光开关(三键) SL_SF_IF3
    # IO口: L1,L2,L3(开关 RW) dark1,dark2,dark3(关状态指示灯亮度 RW)
    #       bright1,bright2,bright3(开状态指示灯亮度 RW)
    #   IO口功能定义完全同SL_SW_IF3,参考上述详细说明
    "SL_SF_IF3",
    # 单火触摸开关 SL_SF_RC
    # IO口: L1,L2,L3(开关 RW) dark(关状态指示灯亮度 RW) bright(开状态指示灯亮度 RW)
    #   IO口功能定义完全同SL_SW_RC,参考上述详细说明
    "SL_SF_RC",
    # === 白玉/墨玉流光开关系列 (Jade Light Switch Series) ===
    # 白玉/墨玉流光开关(单键) SL_SW_RC1
    # IO口: L1(开关 RW) dark(关状态指示灯亮度 RW) bright(开状态指示灯亮度 RW)
    #   IO口功能定义完全同SL_SW_IF1,参考上述详细说明
    "SL_SW_RC1",
    # 白玉/墨玉流光开关(双键) SL_SW_RC2
    # IO口: L1,L2(开关 RW) dark1,dark2(关状态指示灯亮度 RW) bright1,bright2(开状态指示灯亮度 RW)
    #   IO口功能定义完全同SL_SW_IF2,参考上述详细说明
    "SL_SW_RC2",
    # 白玉/墨玉流光开关(三键) SL_SW_RC3
    # IO口: L1,L2,L3(开关 RW) dark1,dark2,dark3(关状态指示灯亮度 RW)
    #       bright1,bright2,bright3(开状态指示灯亮度 RW)
    #   IO口功能定义完全同SL_SW_IF3,参考上述详细说明
    "SL_SW_RC3",
    # === 星玉开关系列 (Nature Switch Series) ===
    # 星玉开关(单键) SL_SW_NS1
    # IO口: L1(开关 RW)
    #   属性值描述: type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #               L1表示第一路开关控制口
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0
    # dark(关状态时指示灯亮度 RW)
    #   属性值描述: type&1==1表示打开; type&1==0表示关闭
    #               val表示指示灯亮度值,定义如下:
    #               bit0~bit7:Blue, bit8~bit15:Green, bit16~bit23:Red, bit24~bit31:white
    #               (当White>0时表示动态模式)具体动态值请参考附录3.1动态颜色(DYN)定义
    #   下发命令: 开灯type=0x81,val=1; 关灯type=0x80,val=0
    #            开灯并设置颜色或动态值type=0xff,val=颜色或动态值
    #            关灯并设置颜色值或动态值type=0xfe,val=颜色或动态值
    # bright(开状态时指示灯亮度 RW) - 同dark定义
    "SL_SW_NS1",
    # 星玉开关(双键) SL_SW_NS2
    # IO口: L1,L2(开关 RW) dark1,dark2(关状态指示灯亮度 RW) bright1,bright2(开状态指示灯亮度 RW)
    #   IO口功能定义完全同SL_SW_NS1,参考上述详细说明
    "SL_SW_NS2",
    # 星玉开关(三键) SL_SW_NS3
    # IO口: L1,L2,L3(开关 RW) dark1,dark2,dark3(关状态指示灯亮度 RW)
    #       bright1,bright2,bright3(开状态指示灯亮度 RW)
    #   IO口功能定义完全同SL_SW_NS1,参考上述详细说明
    "SL_SW_NS3",
    # === 橙朴流光开关系列 (Chengpu Light Switch Series) ===
    # 橙朴流光开关(单键) SL_SW_CP1
    # IO口: L1(开关 RW) dark(关状态指示灯亮度 RW) bright(开状态指示灯亮度 RW)
    #   IO口功能定义完全同SL_SW_IF1,参考上述详细说明
    "SL_SW_CP1",
    # 橙朴流光开关(双键) SL_SW_CP2
    # IO口: L1,L2(开关 RW) dark1,dark2(关状态指示灯亮度 RW) bright1,bright2(开状态指示灯亮度 RW)
    #   IO口功能定义完全同SL_SW_IF2,参考上述详细说明
    "SL_SW_CP2",
    # 橙朴流光开关(三键) SL_SW_CP3
    # IO口: L1,L2,L3(开关 RW) dark1,dark2,dark3(关状态指示灯亮度 RW)
    #       bright1,bright2,bright3(开状态指示灯亮度 RW)
    #   IO口功能定义完全同SL_SW_IF3,参考上述详细说明
    "SL_SW_CP3",
    # === 极星开关(120零火版)系列 (120V Zero-Live Switch Series) ===
    # 极星开关(120零火版,单键) SL_SW_BS1 - 星玉调光开关(0-10V)
    # IO口: P1(开关 RW)
    #   属性值描述: type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #               P1表示第一路开关控制口
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0
    "SL_SW_BS1",
    # 极星开关(120零火版,双键) SL_SW_BS2
    # IO口: P1,P2(开关 RW)
    #   属性值描述: type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #               P1表示第一路开关控制口, P2表示第二路开关控制口
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0
    "SL_SW_BS2",
    # 极星开关(120零火版,三键) SL_SW_BS3
    # IO口: P1,P2,P3(开关 RW)
    #   属性值描述: type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #               P1表示第一路开关控制口, P2表示第二路开关控制口, P3表示第三路开关控制口
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0
    "SL_SW_BS3",
    # === 超能面板系列 (Nature Panel Series) ===
    # 超能面板 SL_NATURE (多功能动态分类设备)
    # ⚠️ 根据P5口值动态分类: P5&0xFF==1→开关版(switch) P5&0xFF==3/6→温控版(climate+sensor)
    #
    # === 开关版 IO口 (P5&0xFF==1) ===
    # P1,P2,P3(开关 RW)
    #   数据类型：整数开关状态
    #   属性值描述：type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #               P1表示第一路开关控制口, P2表示第二路开关控制口, P3表示第三路开关控制口
    #   下发命令：打开type=0x81,val=1; 关闭type=0x80,val=0
    #
    # P4(热敏电阻数组 R) - 可以通过公式换算出温度
    #   数据类型：整数电阻值
    #   属性值描述：val值表示热敏电阻原始数值，可通过公式转换为温度
    #
    # P5(设备种类 R)
    #   数据类型：整数设备类型标识
    #   属性值描述：val&0xFF指示设备种类
    #               1:开关面板, 2:POE面板, 3:温控面板, 6:温控面板
    #               注意:值必须是1才是开关面板,值为3或6才是温控面板,否则是其它类型设备
    #
    # === 温控版 IO口 (P5&0xFF==3 or P5&0xFF==6) ===
    # P1(开关 RW) - 温控面板主开关
    #   数据类型：整数开关状态
    #   属性值描述：type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #   下发命令：打开type=0x81,val=1; 关闭type=0x80,val=0
    #
    # P2(阀门状态 R) - 阀门1状态(盘管的冷阀或者盘管的冷热阀)
    #   数据类型：整数阀门状态
    #   属性值描述：val值表示阀门开启状态，具体数值含义根据系统配置
    #
    # P3(阀门状态 R) - 阀门2状态（盘管的热阀或者地暖阀)
    #   数据类型：整数阀门状态
    #   属性值描述：val值表示阀门开启状态，具体数值含义根据系统配置
    #
    # P4(T当前温度 R)
    #   数据类型：浮点数温度值
    #   属性值描述：v值表示温度值(摄氏度), val值表示原始温度值，它是温度值*10
    #   数据转换：v值可直接使用，若不存在v值需要将val值/10得到温度
    #
    # P5(设备种类 R) - 同上开关版P5定义
    #
    # P6(CFG配置 RW)
    #   数据类型：整数配置参数
    #   属性值描述：(val>>6)&0x7指示设备类型
    #               0:新风模式, 1:风机盘管（单阀）模式, 2:水地暖模式
    #               3:风机盘管+水地暖模式, 4:风机盘管（双阀）模式, 5:水地暖+新风模式
    #   下发命令：type保持原样或type=0xFF, val值为需要设置的值
    #            注意:需要保留其它位，仅设置需要设置的3个bit, 即newCfg&0x7<<6
    #
    # P7(MODE模式 RW)
    #   数据类型：整数工作模式
    #   属性值描述：3:Cool制冷, 4:Heat制热, 7:DN地暖, 8:DN_Heat地暖+空调
    #               注意:P6 CFG配置不同，支持的MODE也会不同
    #   下发命令：type保持原样或type=0xCE, val需要设置的模式值
    #
    # P8(tT目标温度 RW)
    #   数据类型：浮点数温度值
    #   属性值描述：v值表示温度值(摄氏度), val值表示原始温度值，它是温度值*10
    #   下发命令：type保持原样或type=0x88, val需要使用原始温度值(目标温度*10)
    #            示例:下发设定温度为25摄氏度，则应该下发val=250
    #
    # P9(tF目标风速 RW)
    #   数据类型：整数风速级别
    #   属性值描述：val值表示风速，定义如下:
    #               0:Stop停止, 0<val<30:Low低档, 30<=val<65:Medium中档, 65<=val<100:High高档, 101:Auto自动
    #               注意:P6 CFG配置不同，支持的tF也会不同
    #   下发命令：type保持原样或type=0xCE, val值如下:
    #            0:Stop停止, 15:Low低档, 45:Medium中档, 75:High高档, 101:Auto自动
    #
    # P10(F当前风速 R)
    #   数据类型：整数风速级别
    #   属性值描述：val值表示风速，定义同tF相同
    #               0:stop停止, 0<val<30:Low低档, 30<=val<65:Medium中档, 65<=val<100:High高档, 101:Auto自动
    #
    # 动态分类: P5&0xFF==1→switch平台, P5&0xFF==3/6→climate+sensor平台
    "SL_NATURE",
    # === 奇点开关模块系列 (CUBE Switch Module Series) ===
    # 奇点开关模块(单路) SL_SW_MJ1
    # IO口: P1(开关 RW)
    #   属性值描述: type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #               P1表示第一路开关控制口
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0
    "SL_SW_MJ1",
    # 奇点开关模块(双路) SL_SW_MJ2
    # IO口: P1,P2(开关 RW)
    #   属性值描述: type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #               P1表示第一路开关控制口, P2表示第二路开关控制口
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0
    "SL_SW_MJ2",
    # 奇点开关模块(三路) SL_SW_MJ3
    # IO口: P1,P2,P3(开关 RW)
    #   属性值描述: type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #               P1表示第一路开关控制口, P2表示第二路开关控制口, P3表示第三路开关控制口
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0
    "SL_SW_MJ3",
    # === 动态调光开关 (Dimmer Motion Controller) ===
    # 动态调光开关 SL_SW_DM1 - 参见VERSIONED_DEVICE_TYPES中的版本区分
    # 提示: 需要查看设备的fullCls属性区分版本
    # fullCls="SL_SW_DM1_v1"为动态调光开关, fullCls="SL_SW_DM1_v2"为星玉调光开关(可控硅)
    #
    # === SL_SW_DM1_v1 动态调光开关版本 ===
    # IO口: P1(开关 RW) - 亮度控制
    #   属性值描述: type&1==1表示处于打开状态; type&1==0表示处于关闭状态
    #               val值为亮度值,可调范围[0,255],值越大表示光越亮,0处于最暗光完全熄灭,255处于最亮
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0
    #            打开并设置亮度type=207,val=亮度值[0,255]
    #            关闭并设置亮度type=206,val=亮度值[0,255]
    # P2(指示灯 RW) - 指示灯亮度控制
    #   属性值描述: type&1==1表示处于打开状态; type&1==0表示处于关闭状态
    #               val值为亮度值,它有灯光处于打开状态下的指示灯亮度和灯光处于关闭状态下的指示灯亮度
    #               bit8-bit15:用于指示灯光处于打开状态下的指示灯亮度
    #               bit0-bit7:用于指示灯光处于关闭状态下的指示灯亮度
    #               每8个bit可调范围[0,255],值越大表示光越亮,0处于最暗光完全熄灭,255处于最亮
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0
    #            设置亮度type=223,val=亮度值[0,65535]
    #            示例:设置灯光开启状态亮度为50,灯光关闭状态亮度为25,则下发参数:type=223,val=12825
    #   注意: 如果是物理触发控制(即直接在物理开关上触发)则指示灯会有5秒的响应物理按键触发时间,
    #        过了5秒才会反应真实的设置;如果是远端触发(通过API或App)则会立即反应真实的设置
    # P3(移动检测 R)
    #   属性值描述: val值定义如下: 0:没有检测到移动, 1:有检测到移动
    # P4(环境光照 R)
    #   属性值描述: val值表示原始光照值(单位:lux)
    # P5(调光设置 RW) - 当前调光设置值
    # P6(动态设置 RW) - 当前动态设置值
    #
    # === SL_SW_DM1_v2 星玉调光开关(可控硅)版本 ===
    # IO口: P1(开关 RW) P2(指示灯亮度 RW) - 同v1版本定义
    "SL_SW_DM1",
    # --- 其他开关 ---
    # 虚拟开关 - 根据配置动态生成IO口
    "V_IND_S",
}

BUTTON_SWITCH_TYPES = {
    # 随心开关(CUBE Clicker) SL_SC_BB - 基于SL_SC_BB_V1版本
    # IO口详细说明：
    # V(电量 R) - 按键设备电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值(通常2000-4200,对应2.0V-4.2V)
    #               v为电量百分比[0,100],通过电压-百分比映射表转换
    #   低电报警：v<20时应提示更换电池
    #   电池类型：通常为CR2032或CR2450纽扣电池,3V供电
    #   续航能力：正常使用可持续1-2年
    #
    # B(按键状态 R) - 基础按键状态检测
    #   数据类型：整数状态位
    #   属性值描述：val值定义如下: 0:按键未按下状态, 1:按键按下状态
    #   检测原理：机械按键开关，按下时导通，松开时断开
    #   应用场景：简单的按键触发，适用于场景控制、设备开关等
    #   响应速度：按键响应时间<100ms，支持快速操作
    "SL_SC_BB",
    # 随心按键(CUBE Clicker2) SL_SC_BB_V2 - 高级版本
    # IO口详细说明：
    # P1(按键状态 R) - 高级按键事件类型检测
    #   数据类型：整数事件类型
    #   属性值描述：val值定义如下按键事件类型:
    #     1: 单击事件 - 快速按下并松开
    #     2: 双击事件 - 连续两次快速单击，间隔<500ms
    #     255: 长按事件 - 按住不放超过1秒
    #   事件机制：按键事件触发后val设为对应值，一定时间后自动清零
    #   智能识别：自动区分不同按键模式，提供丰富的交互方式
    #   应用扩展：支持复杂的智能家居控制逻辑
    #
    # P2(电量 R) - 电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值,v为电量百分比[0,100]
    #   电池管理：同V1版本，但可能采用更高效的电源管理
    #   低电提醒：支持低电量预警，确保设备正常工作
    # 注意: SL_SC_BB_V2为版本标识符,通过fullCls="SL_SC_BB_V2"区分版本
    # "SL_SC_BB_V2",  # 移除版本设备,使用VERSIONED_DEVICE_TYPES处理
}

# ================= 插座系列 (Outlet/Plug Series) =================

# ================= 灯光系列 (Light Series) =================
# === 调光调色灯/控制器 (Dimmer Light Controllers) ===
LIGHT_DIMMER_TYPES = {
    # 白光智能灯泡 SL_LI_WW
    # IO口: P1(亮度控制 RW)
    #   属性值描述: type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #               val指示灯光的亮度值范围[0,255],255亮度最大
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0; 设置亮度type=0xcf,val=亮度值[0,255]
    # P2(色温控制 RW)
    #   属性值描述: val值为色温值,取值范围[0,255],0表示暖光,255表示冷光
    #   下发命令: 设置色温type=0xcf,val=色温值[0,255]
    "SL_LI_WW",
    # 智能灯泡(冷暖白) SL_LI_WW_V1 - 同SL_LI_WW规范
    # IO口: P1(亮度控制 RW) P2(色温控制 RW)
    #   IO口功能定义完全同SL_LI_WW,参考上述详细说明
    # 注意: SL_LI_WW_V1为版本标识符,通过fullCls="SL_LI_WW_V1"区分版本
    # "SL_LI_WW_V1",  # 移除版本设备,使用基础设备类型处理
    # 调光调色智控器(0-10V) SL_LI_WW_V2 - 同SL_LI_WW规范
    # IO口: P1(亮度控制 RW) P2(色温控制 RW)
    #   IO口功能定义完全同SL_LI_WW,参考上述详细说明
    # 注意: SL_LI_WW_V2为版本标识符,通过fullCls="SL_LI_WW_V2"区分版本
    # "SL_LI_WW_V2",  # 移除版本设备,使用基础设备类型处理
    # 星玉调光开关(0-10V) SL_SW_WW / SL_SW_WW_V1
    # IO口: P1(亮度控制 RW) P2(色温控制 RW)
    #   IO口功能定义完全同SL_LI_WW,参考上述详细说明
    #   提示: 需要查看SL_SW_WW设备的fullCls属性,fullCls="SL_SW_WW_V1"为星玉调光开关(0-10V)
    "SL_SW_WW",
    # 星玉调光开关(可控硅/动态调光) - 参见VERSIONED_DEVICE_TYPES
    # 提示: 需要查看SL_SW_DM1设备的fullCls属性,fullCls="SL_SW_DM1_v2"为星玉调光开关(可控硅)
    "SL_SW_DM1",
    # 红外吸顶灯 SL_LI_IR
    # IO口: P1(亮度控制 RW)
    #   属性值描述: type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #               val值为亮度值,值范围[0,255],255亮度最大
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0; 设置亮度type=0xcf,val=亮度值[0,255]
    # P2(色温控制 RW)
    #   属性值描述: val值为色温值,取值范围[0,255],0表示暖光,255表示冷光
    #   下发命令: 设置色温type=0xcf,val=色温值[0,255]
    # P3(夜灯亮度控制 RW)
    #   属性值描述: val值为夜灯亮度,共有5档,亮度从低到高分别为:0、63、127、195、255
    #               0表示夜灯处于关闭状态,255表示夜灯处于最亮状态
    #               注意:若亮度值为其它值则根据如下规则判断亮度档位:
    #               0:关闭档; >=196:最亮档; >=128并且<=195:次亮档; >=64并且<=127:第三亮档; >0并且<=63:第四亮档
    #   下发命令: 设置亮度type=0xcf,val=亮度值,亮度取值:0、63、127、195、255
    "SL_LI_IR",
}
# === 亮度调节控制器 (Brightness Controllers) ====
BRIGHTNESS_LIGHT_TYPES = {
    # 可调亮度开关智控器 SL_SPWM
    # IO口: P1(开关+亮度 RW)
    #   属性值描述: type&1==1表示处于打开状态; type&1==0表示处于关闭状态
    #               val值为亮度值,可调范围[0,255],值越大表示光越亮,0处于最暗光完全熄灭,255处于最亮
    #   下发命令: 打开type=0x81,val=1; 关闭type=0x80,val=0
    #            打开并设置亮度type=207,val=亮度值[0,255]
    #            关闭并设置亮度type=206,val=亮度值[0,255]
    "SL_SPWM",
}
# === 量子灯系列 (Quantum Light Series) ===
QUANTUM_TYPES = {
    # 量子灯 OD_WE_QUAN
    # IO口: P1(亮度控制 RW)
    #   属性值描述: type&1==1表示打开(忽略val值); type&1==0表示关闭(忽略val值)
    #               val指示灯光的亮度值范围[0,100],100亮度最大
    #   下发命令: 开灯(打开)type=0x81,val=1; 关灯(关闭)type=0x80,val=0
    #            设置亮度type=0xcf,val=亮度值[0,100]
    # P2(颜色控制 RW)
    #   属性值描述: val值为颜色值,大小4个字节,定义如下:
    #               bit0~bit7:Blue, bit8~bit15:Green, bit16~bit23:Red, bit24~bit31:White
    #               (当White>0时表示动态模式)具体动态值请参考附录3.2动态颜色(DYN)定义和附录3.3量子灯特殊(DYN)定义
    #   下发命令: 设置颜色或动态值type=0xff,val=颜色或动态值
    "OD_WE_QUAN",
}
# === RGB灯带/灯泡系列 (RGB Light Series) ===
RGB_LIGHT_TYPES = {
    # 幻彩灯带(不带白光) SL_SC_RGB
    # IO口: RGB(RGB颜色值 RW)
    #   属性值描述: type&1==1表示打开; type&1==0表示关闭
    #               val值为颜色值,大小4个字节,定义如下:
    #               bit0~bit7:Blue, bit8~bit15:Green, bit16~bit23:Red, bit24~bit31:White
    #               (当White>=128时表示动态模式)具体动态值请参考附录3.2动态颜色(DYN)定义
    #   下发命令: 开灯type=0x81,val=1; 关灯type=0x80,val=0
    #            开灯并设置颜色或动态值type=0xff,val=颜色或动态值
    #            关灯并设置颜色值或动态值type=0xfe,val=颜色或动态值
    "SL_SC_RGB",
}
RGBW_LIGHT_TYPES = {
    # 幻彩灯带(带白光) SL_CT_RGBW
    # IO口详细说明：
    # RGBW(颜色控制 RW) - RGBW四色通道控制
    #   数据类型：32位整数颜色值
    #   颜色格式：bit0~7:Blue, bit8~15:Green, bit16~23:Red, bit24~31:White
    #   取值逻辑：type&1==1表示打开; type&1==0表示关闭
    #   下发命令：开灯type=0x81,val=1; 关灯type=0x80,val=0
    #            开灯并设置颜色type=0xff,val=颜色值
    #            关灯并设置颜色type=0xfe,val=颜色值
    #   颜色示例：val=0x00FF0000表示纯红色,val=0xFF000000表示纯白光
    #
    # DYN(动态效果 RW) - 动态颜色模式控制
    #   数据类型：32位整数动态效果值
    #   取值逻辑：type&1==1表示动态开启; type&1==0表示动态关闭
    #   下发命令：开启动态type=0x81,val=1; 关闭动态type=0x80,val=0
    #            设置动态效果type=0xff,val=动态效果值
    #   重要限制：DYN不能单独下发,必须与RGBW一起下发
    #            先设置RGBW为开启状态,再设置DYN效果值
    #   动态效果值：参考DYN_EFFECT_MAP中的预定义动态效果
    "SL_CT_RGBW",
    # RGBW灯泡 SL_LI_RGBW - 同SL_CT_RGBW规范
    # IO口: RGBW(颜色控制 RW) DYN(动态效果 RW)
    #   IO口功能定义完全同SL_CT_RGBW,参考上述详细说明
    "SL_LI_RGBW",
}
# --- 户外灯 ---
OUTDOOR_LIGHT_TYPES = {
    # 调光壁灯(门廊壁灯) SL_LI_GD1
    # IO口详细说明：
    # P1(开关+亮度 RW) - 亮度调节控制
    #   数据类型：整数亮度值
    #   属性值描述：type&1==1表示处于打开状态; type&1==0表示处于关闭状态
    #               val值为亮度值,可调范围[0,255],值越大表示光越亮,0处于最暗光完全熄灭,255处于最亮
    #   下发命令：打开type=0x81,val=1; 关闭type=0x80,val=0
    #            打开并设置亮度type=207,val=亮度值[0,255]
    #            关闭并设置亮度type=206,val=亮度值[0,255]
    #
    # P2(移动检测 R) - PIR人体移动感应
    #   数据类型：整数状态位
    #   属性值描述：val值定义如下: 0:没有检测到移动, 1:有检测到移动
    #   传感器类型：PIR红外传感器,检测人体热辐射变化
    #   触发机制：检测到人体移动时val=1,一定时间后自动清零为0
    #
    # P3(环境光照 R) - 环境光照度检测
    #   数据类型：整数光照值
    #   属性值描述：val值表示原始光照值,单位:lux(勒克斯)
    #   测量范围：根据传感器规格,通常0-65535lux
    #   应用场景：可用于智能控制,当环境光照低于阈值时自动开灯
    "SL_LI_GD1",
    # 花园地灯 SL_LI_UG1
    # IO口详细说明：
    # P1(开关+颜色设置 RW) - RGBW颜色值控制
    #   数据类型：32位整数颜色值
    #   颜色格式：bit0~7:Blue, bit8~15:Green, bit16~23:Red, bit24~31:White
    #   属性值描述：type&1==1表示打开; type&1==0表示关闭
    #               bit24-31的White通道可设白光模式或动态模式
    #               当White>0时可表示动态模式,具体动态值请参考DYN_EFFECT_MAP定义
    #   下发命令：开灯type=0x81,val=1; 关灯type=0x80,val=0
    #            开灯并设置颜色type=0xff,val=颜色值
    #            关灯并设置颜色type=0xfe,val=颜色值
    #   颜色示例：val=0x00FF0000表示纯红色,val=0x0000FF00表示纯绿色,val=0xFF000000表示纯白光
    #
    # P2(环境光照 R) - 环境光照度检测
    #   数据类型：整数光照值
    #   属性值描述：val值表示光照值,单位:lux(勒克斯)
    #   应用场景：花园地灯可根据环境光照自动调节亮度或开关状态
    #
    # P3(充电指示 R) - 太阳能充电状态
    #   数据类型：整数状态位
    #   属性值描述：val值定义如下: 0:无充电状态, 1:正在充电
    #   充电模式：通常配备太阳能电池板,白天充电晚上放电
    #
    # P4(电量 R) - 电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值(通常2000-4200,对应2.0V-4.2V)
    #               v为电量百分比[0,100],通过电压-百分比映射表转换
    #   低电报警：v<20时应提示充电或更换电池
    #   电池类型：通常为锂电池,标称电压3.7V
    "SL_LI_UG1",
}

# ================= 窗帘系列 (Cover Series) =================
DOOYA_TYPES = {
    # DOOYA窗帘电机
    # IO口: P1(窗帘状态 R) - type&1==1正在运行/0停止
    #   运行时:val&0x80==0x80正在开/否正在关
    #   val&0x7F为位置百分比[0,100]
    #   若val&0x7F>100则无位置信息,需全开全关后重新获取
    # P2(窗帘控制 W) - 完全打开val=100/完全关闭val=0
    #   停止val=0x80/开到百分比val=percent[0,100]
    "SL_DOOYA",
    # 注意: SL_DOOYA_V2~V9为版本标识符,通过fullCls区分版本
    # 所有版本都使用相同的IO口定义: P1(窗帘状态) P2(窗帘控制)
    # "SL_DOOYA_V2",  # 速接窗帘电机 - 移除版本设备
    # "SL_DOOYA_V3",  # 卷帘电机 - 移除版本设备
    # "SL_DOOYA_V4",  # 卷帘电机电池版 - 移除版本设备
    # "SL_DOOYA_V5",  # 智能梦幻窗帘电机 - 移除版本设备
    # "SL_DOOYA_V6",  # 超静音智能卷帘电机 - 移除版本设备
    # "SL_DOOYA_V7",  # 窗帘电机(锂电池) - 移除版本设备
    # "SL_DOOYA_V8",  # 卷帘电机V8 - 移除版本设备
    # "SL_DOOYA_V9",  # 智能梦幻窗帘电机V9 - 移除版本设备
}

COVER_TYPES = {
    # 智界窗帘电机智控器 - 注意: SL_P_V2不是版本设备
    # IO口: P2(打开窗帘 RW) - type&1==1表示打开窗帘
    # P3(关闭窗帘 RW) - type&1==1表示关闭窗帘
    # P4(停止窗帘 RW) - type&1==1表示停止当前动作
    # P8(电压 R) - val原始电压值,v为电量百分比[0,100]
    "SL_P_V2",  # 这不是版本设备，这是真实设备
    # 窗帘控制开关
    # IO口: OP/P1(打开窗帘 RW) - type&1==1表示打开窗帘
    # CL/P3(关闭窗帘 RW) - type&1==1表示关闭窗帘
    # ST/P2(停止窗帘 RW) - type&1==1表示停止当前动作
    # dark(关闭状态时指示灯亮度 RW) - val亮度值[0,1023]
    # bright(开启状态时指示灯亮度 RW) - val亮度值[0,1023]
    "SL_SW_WIN",
    # 流光窗帘开关
    # IO口: P1(打开窗帘 RW) - type&1==1表示打开窗帘
    # P2(关闭窗帘 RW) - type&1==1表示关闭窗帘
    # P3(停止窗帘 RW) - type&1==1表示停止当前动作
    # P4(打开面板指示灯颜色值 RW) - RGBW颜色值,White>0动态模式
    # P5(停止时指示灯颜色值 RW) - RGBW颜色值,White>0动态模式
    # P6(关闭面板指示灯颜色值 RW) - RGBW颜色值,White>0动态模式
    "SL_CN_IF",
    # 格致/塞纳三键窗帘
    # IO口: P1(打开窗帘 RW) - type&1==1表示打开窗帘
    # P2(停止窗帘 RW) - type&1==1表示停止当前动作
    # P3(关闭窗帘 RW) - type&1==1表示关闭窗帘
    "SL_CN_FE",
}

# --- 带灯光功能的覆盖物设备 ---
COVER_WITH_LIGHT_TYPES = {
    # 车库门控制器 SL_ETDOOR
    # IO口详细说明：
    # P1(灯光控制 RW) - 车库门灯光开关控制
    #   数据类型：整数开关控制
    #   属性值描述：type&1==1表示灯光打开; type&1==0表示灯光关闭
    #   下发命令：开灯type=0x81,val=1; 关灯type=0x80,val=0
    #   功能说明：控制车库门配套的照明灯，便于夜间操作和安全
    #   自动功能：通常在车库门开启时自动开灯，延时后自动关灯
    #
    # P2(车库门状态 R) - 车库门当前位置和运行状态
    #   数据类型：整数状态和位置复合值
    #   属性值描述：type&1==1表示正在运行; type&1==0表示停止
    #   位置解析：val的低7位(val&0x7F)表示位置百分比[0,100]
    #     0表示完全关闭，100表示完全打开
    #   运行方向：val的最高位(val&0x80)表示运行方向
    #     val&0x80==0x80表示正在开启，val&0x80==0x00表示正在关闭
    #   状态组合：结合type和val可以完整描述车库门状态
    #     type&1==1 && val&0x80==0x80: 正在开启
    #     type&1==1 && val&0x80==0x00: 正在关闭
    #     type&1==0: 静止状态，val&0x7F为当前位置
    #
    # P3(车库门控制 W) - 车库门动作控制命令
    #   数据类型：整数控制命令
    #   控制命令：
    #     val=100: 完全打开车库门
    #     val=0: 完全关闭车库门
    #     val=0x80(128): 停止当前动作
    #     val=percent[1,99]: 开启到指定百分比位置
    #   下发命令：设置目标位置或动作type=0xcf,val=控制值
    #   安全机制：车库门具有防夹保护，遇阻会自动停止或反向
    #   位置控制：支持精确的位置控制，可以部分开启车库门
    "SL_ETDOOR",
    # 流光窗帘开关 - 有P4/P5/P6三个RGBW灯光IO口
    "SL_CN_IF",
    # 窗帘控制开关 - 有dark/bright两个亮度控制IO口
    "SL_SW_WIN",
}

# --- 车库门类型 (P1灯光控制的设备) ---
GARAGE_DOOR_TYPES = {
    # 车库门控制器 - P1为灯光控制
    "SL_ETDOOR",
}


# ================= 感应器 - 二元状态 (Binary Sensor Series) =================
# --- 门窗感应器 ---
GUARD_SENSOR_TYPES = {
    # 门禁感应器 SL_SC_G
    # IO口详细说明：
    # G(当前状态 R) - 门窗开关状态检测
    #   数据类型：整数状态位
    #   属性值描述：val值定义如下: 0:门窗处于打开状态, 1:门窗处于关闭状态
    #   工作原理：磁感应开关,门窗关闭时磁铁靠近传感器,输出1;门窗打开时磁铁远离传感器,输出0
    #   安装说明：传感器本体安装在门框上,磁铁安装在门扇上,两者对齐
    #
    # V(电量 R) - 电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值(通常2000-4200,对应2.0V-4.2V)
    #               v为电量百分比[0,100],通过电压-百分比映射表转换
    #   低电报警：v<20时应提示更换电池
    #   电池类型：通常为CR2032纽扣电池或AAA电池,3V供电
    "SL_SC_G",
    # 多功能(CUBE)门禁感应器 SL_SC_BG
    # IO口详细说明：
    # G(当前状态 R) - 门窗开关状态检测
    #   数据类型：整数状态位
    #   属性值描述：val值定义如下: 0:门窗处于打开状态, 1:门窗处于关闭状态
    #   工作原理：同SL_SC_G,磁感应开关检测门窗开合状态
    #
    # V(电量 R) - 电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值,v为电量百分比[0,100]
    #   电池管理：同SL_SC_G规范
    #
    # B(按键状态 R) - 物理按键检测
    #   数据类型：整数状态位
    #   属性值描述：val值定义如下: 0:按键未按下状态, 1:按键按下状态
    #   按键功能：可用于手动触发场景或报警,支持短按和长按检测
    #
    # AXS(震动状态 R) - 震动检测传感器
    #   数据类型：整数震动强度
    #   属性值描述：val值定义如下: 0:无震动检测, 非0:有震动检测
    #               val值大小表示震动强度,数值越大震动越强烈
    #   灵敏度：可通过设备配置调节震动检测的灵敏度阈值
    #   应用场景：防盗报警,检测门窗被强制打开或破坏
    "SL_SC_BG",
    # 门窗感应器 SL_SC_GS
    # IO口详细说明：
    # P1(门禁状态 R) - 门窗磁感应状态
    #   数据类型：整数状态位
    #   属性值描述：type&1==1表示打开状态; type&1==0表示吸合状态
    #               吸合状态表示门窗关闭(磁铁靠近),打开状态表示门窗打开(磁铁远离)
    #   工作原理：基于霍尔效应或簧片开关的磁感应检测
    #
    # AXS(震动状态 R) - 震动检测传感器
    #   数据类型：整数震动检测
    #   属性值描述：type&1==1表示震动状态; type&1==0表示无震动
    #               val值表示震动强度或持续时间,具体数值含义视传感器规格而定
    #   检测原理：基于加速度计或震动传感器,检测物理振动
    #   报警应用：可设置为入侵检测,当门窗被暴力破坏时触发报警
    #
    # V(电量 R) - 电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值,v为电量百分比[0,100]
    #   电池管理：定期检查电量,及时更换电池以确保安防功能正常
    "SL_SC_GS",
}

# --- 移动动态(PIR)感应器 ---
MOTION_SENSOR_TYPES = {
    # 动态感应器 SL_SC_MHW
    # IO口详细说明：
    # M(移动检测 R) - PIR人体红外检测
    #   数据类型：整数状态位
    #   属性值描述：val值定义如下: 0:没有检测到移动, 1:有检测到移动
    #   检测原理：基于PIR(被动红外)传感器,检测人体热辐射变化
    #   检测范围：通常120°检测角度,5-8米检测距离
    #   触发机制：检测到人体移动时val=1,延时一段时间后自动清零为0
    #   灵敏度：可通过物理调节或软件配置调节检测灵敏度
    #
    # V(电量 R) - 电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值(通常2000-4200,对应2.0V-4.2V)
    #               v为电量百分比[0,100],通过电压-百分比映射表转换
    #   低电报警：v<20时应提示更换电池
    #   电池类型：通常为CR123A或AAA电池,3V供电
    "SL_SC_MHW",
    # 多功能(CUBE)动态感应器 SL_SC_BM
    # IO口详细说明：
    # M(移动检测 R) - PIR人体红外检测
    #   数据类型：整数状态位
    #   属性值描述：val值定义如下: 0:没有检测到移动, 1:有检测到移动
    #   检测原理：同SL_SC_MHW,基于PIR传感器的人体热辐射检测
    #   集成度：CUBE系列产品,集成多种传感器功能
    #
    # V(电量 R) - 电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值,v为电量百分比[0,100]
    #   电池管理：同SL_SC_MHW规范
    "SL_SC_BM",
    # 动态感应器(7号电池版) SL_SC_CM
    # IO口详细说明：
    # P1(移动检测 R) - PIR人体红外检测
    #   数据类型：整数状态位
    #   属性值描述：val值定义如下: 0:没有检测到移动, 1:有检测到移动
    #   检测原理：同其他PIR传感器,检测人体热辐射变化
    #   供电方式：使用7号(AAA)电池供电,便于更换维护
    #
    # P3(电量 R) - 主电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值,v为电量百分比[0,100]
    #   电池类型：7号(AAA)碱性电池或镍氢充电电池
    #
    # P4(USB供电电压 R) - USB充电检测
    #   数据类型：整数电压检测
    #   属性值描述：val>430表示USB供电充满,val<=430表示USB未供电或充电中
    #   供电逻辑：连接USB时忽略P3的电池电量,优先使用USB供电
    #   充电功能：支持USB充电(如果配备可充电电池)
    "SL_SC_CM",
    # 移动感应器(Pro) SL_BP_MZ
    # IO口详细说明：
    # P1(移动检测 R) - PIR人体红外检测
    #   数据类型：整数状态位
    #   属性值描述：val值定义如下: 0:没有检测到移动, 1:有检测到移动
    #   Pro特性：更高精度的PIR传感器,减少误报,提高检测准确性
    #
    # P2(当前环境光照 R) - 环境光照度检测
    #   数据类型：整数光照值
    #   属性值描述：val为原始光照值,v为实际值,单位:lux(勒克斯)
    #   测量范围：0-65535lux,覆盖从完全黑暗到强光的全范围
    #   应用场景：可与移动检测联动,在光照不足时触发照明自动化
    #
    # P3(电量 R) - 电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值,v为电量百分比[0,100]
    #   Pro版本：通常配备更大容量电池or更低功耗设计,延长使用寿命
    "SL_BP_MZ",
}
# --- 水浸感应器 ---
WATER_SENSOR_TYPES = {
    # 水浸感应器 SL_SC_WA
    # IO口详细说明：
    # WA(导电率 R) - 水浸检测传感器
    #   数据类型：整数导电率值
    #   属性值描述：val值定义如下: 0:未检测到水,值越大表示水量越多或导电率越高
    #   检测原理：基于电导率测量,当传感器探头接触到水时,电阻值发生变化
    #   灵敏度：可检测微量积水,不同的val值对应不同的水量级别
    #   应用场景：地下室、厨房、卫生间等容易积水区域的漏水检测
    #   报警逻辑：val>阈值时触发漏水报警,可设置不同阈值对应不同严重程度
    #
    # V(电量 R) - 电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值(通常2000-4200,对应2.0V-4.2V)
    #               v为电量百分比[0,100],通过电压-百分比映射表转换
    #   低电报警：v<20时应提示更换电池,确保关键安防功能不中断
    #   电池类型：通常为CR2032或CR123A电池,防水设计确保传感器可靠工作
    "SL_SC_WA"
}
# --- 烟雾感应器 ---
SMOKE_SENSOR_TYPES = {
    # 烟雾感应器 SL_P_A
    # IO口详细说明：
    # P1(当前是否有烟雾告警 R) - 烟雾检测状态
    #   数据类型：整数状态位
    #   属性值描述：val值定义如下: 0:无烟雾告警状态, 1:有烟雾告警状态
    #   检测原理：基于光电式或离子式烟雾检测器,检测空气中的烟雾颗粒
    #   报警逻辑：当烟雾浓度超过预设阈值时val=1,触发火灾报警
    #   自检功能：定期自动检测传感器工作状态,确保检测精度
    #
    # P2(电压 R) - 电源电压检测
    #   数据类型：整数电压值
    #   属性值描述：9V电池供电时实际电压=val/100*3,外接12V供电时val值无效
    #               v为电量百分比[0,100],适用于电池供电方式
    #   供电方式：支持9V电池供电或12V外接电源供电
    #   电压监测：电池供电时需要监测电压,确保报警器正常工作
    #   低电提示：电池电压过低时应发出低电报警,提醒及时更换电池
    "SL_P_A"
}
# --- 人体存在(雷达)感应器 ---
RADAR_SENSOR_TYPES = {
    # 人体存在感应器 SL_P_RM
    # IO口详细说明：
    # P1(移动检测 R) - 雷达人体检测
    #   数据类型：整数检测状态
    #   属性值描述：val值定义如下: 0:无移动检测, 非0:有移动检测
    #   检测原理：基于毫米波雷达技术,检测人体的微小移动和呼吸
    #   技术优势：相比PIR传感器,雷达可穿透衣物,检测静止状态下的人体存在
    #   检测精度：可检测到人体的呼吸和微小动作,实现真正的人体存在检测
    #
    # P2(移动检测参数设置 RW) - 雷达参数配置
    #   数据类型：32位参数配置
    #   参数结构：bit0-7:动态锁定时间, bit8-25:灵敏度设置
    #   动态锁定时间：检测到人体后的保持时间,单位通常为秒或分钟
    #   灵敏度设置：调节雷达的检测灵敏度,数值越大越敏感
    #   下发命令：设置参数type=0xff,val=配置参数值
    #   调节建议：根据应用场景调节灵敏度,避免误报或漏报
    "SL_P_RM"
}
# --- 云防系列 ---
DEFED_SENSOR_TYPES = {
    # 云防门窗感应器 SL_DF_GG
    # IO口详细说明：
    # A(当前状态 R) - 门窗开关状态检测
    #   数据类型：整数状态位
    #   属性值描述：type&1==1表示打开状态; type&1==0表示吸合状态
    #               吸合状态表示门窗关闭,打开状态表示门窗打开
    #   工作原理：磁感应开关检测,集成无线通信功能
    #
    # A2(外部感应器状态 R) - 扩展感应器接口
    #   数据类型：整数状态位
    #   属性值描述：type&1==1表示外部感应器打开; type&1==0表示吸合
    #               当无外部感应器连接时,type值固定为1
    #   扩展功能：可连接额外的磁感应器,实现多点检测
    #
    # T(温度 R) - 环境温度检测
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   温度范围：通常-20℃到+60℃,精度±0.5℃
    #   应用场景：环境监控,温度异常报警
    #
    # V(电量 R) - 电池电量和低电报警
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值,v为电量百分比[0,100]
    #               type&1==1表示低电报警状态
    #   低电报警：当电量低于20%时,type&1==1,需要及时更换电池
    #
    # TR(防拆状态 R) - 设备防拆检测
    #   数据类型：整数状态位
    #   属性值描述：type&1==1表示触发防拆警报; type&1==0表示状态正常
    #   防拆机制：设备内置防拆开关,当设备被非法拆卸时触发报警
    #   安全应用：防止入侵者破坏或移除安防设备
    "SL_DF_GG",
    # 云防动态感应器 SL_DF_MM
    # IO口详细说明：
    # M(当前状态 R) - PIR人体移动检测
    #   数据类型：整数状态位
    #   属性值描述：type&1==1表示侦测到人体移动; type&1==0表示无移动
    #   检测原理：PIR被动红外传感器,检测人体热辐射变化
    #   云防特性：集成无线通信,支持远程监控和报警
    #
    # T(温度 R) - 环境温度检测
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   温度监控：同SL_DF_GG规范,支持温度异常检测
    #
    # V(电量 R) - 电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值,v为电量百分比[0,100]
    #               type&1==1表示低电报警状态
    #   电池管理：同云防门窗感应器规范
    #
    # TR(防拆状态 R) - 设备防拆检测
    #   数据类型：整数状态位
    #   属性值描述：type&1==1表示触发防拆警报; type&1==0表示状态正常
    #   防拆保护：同SL_DF_GG规范,防止设备被非法移除
    "SL_DF_MM",
    # 云防室内警铃 SL_DF_SR
    # IO口详细说明：
    # SR(当前状态 R) - 警铃播放状态
    #   数据类型：整数状态位
    #   属性值描述：type&1==1表示警铃正在播放; type&1==0表示正常状态
    #   声音功能：内置多种报警音效,可远程触发播放
    #
    # T(温度 R) - 环境温度检测
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   温度监控：同其他云防设备规范
    #
    # V(电量 R) - 电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值,v为电量百分比[0,100]
    #               type&1==1表示低电报警状态
    #   电池管理：同云防系列其他设备规范
    #
    # TR(防拆状态 R) - 设备防拆检测
    #   数据类型：整数状态位
    #   属性值描述：type&1==1表示触发防拆警报; type&1==0表示状态正常
    #   防拆保护：防止警铃设备被恶意破坏或移除
    #
    # P1(报警设置 RW) - 警铃参数配置
    #   数据类型：32位配置参数
    #   参数结构：AABB(持续时长) CC(声音强度) DD(音频序号)
    #   持续时长：报警播放的时间长度,单位通常为秒
    #   声音强度：音量级别,数值越大音量越高
    #   音频序号：选择不同的报警音效,支持多种预设音效
    #   下发命令：设置报警参数type=0xff,val=配置参数值
    "SL_DF_SR",
    # 云防遥控器 SL_DF_BB
    # IO口详细说明：
    # eB1(按键1状态 R) - 布防按键检测
    #   数据类型：整数状态位
    #   属性值描述：type&1==1表示按下; type&1==0表示松开
    #   按键功能：布防图标按键,用于激活安防系统
    #
    # eB2(按键2状态 R) - 撤防按键检测
    #   数据类型：整数状态位
    #   属性值描述：type&1==1表示按下; type&1==0表示松开
    #   按键功能：撤防图标按键,用于关闭安防系统
    #
    # eB3(按键3状态 R) - 警告按键检测
    #   数据类型：整数状态位
    #   属性值描述：type&1==1表示按下; type&1==0表示松开
    #   按键功能：警告图标按键,用于手动触发报警或求助
    #
    # eB4(按键4状态 R) - 在家按键检测
    #   数据类型：整数状态位
    #   属性值描述：type&1==1表示按下; type&1==0表示松开
    #   按键功能：在家图标按键,用于设置在家模式(部分撤防)
    #
    # V(电量 R) - 电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值,v为电量百分比[0,100]
    #               type&1==1表示低电报警状态
    #   电池类型：通常为12V23A小电池,需定期更换
    "SL_DF_BB",
    # 云防Keypad SL_DF_KP
    # IO口详细说明：
    # 数字键盘设备,具体IO口定义根据实际产品规格确定
    # 通常包括数字按键检测、确认键、取消键等功能
    "SL_DF_KP",
}
# --- 基础二元传感器 (通常是其他设备附带的) ---
BINARY_SENSOR_TYPES = GUARD_SENSOR_TYPES | MOTION_SENSOR_TYPES

# ================= 感应器 - 数值状态 (Sensor Series) =================
# --- 基础环境感应器(温湿度光照) ---
BASIC_ENV_SENSOR_TYPES = {
    # 环境感应器(温湿度光照) SL_SC_THL
    # IO口详细说明：
    # T(当前环境温度 R) - 温度检测传感器
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   测量范围：通常-20℃到+60℃,精度±0.5℃
    #   传感器类型：数字温度传感器,如SHT30或类似芯片
    #   数据处理：val需要除以10得到实际温度,如val=235表示23.5℃
    #
    # H(当前环境湿度 R) - 湿度检测传感器
    #   数据类型：整数湿度值
    #   属性值描述：val为原始湿度值*10,v为实际湿度值,单位:%
    #   测量范围：0-100%,精度±3%
    #   传感器类型：电容式湿度传感器,集成在温湿度传感器中
    #   数据处理：val需要除以10得到实际湿度,如val=650表示65.0%
    #
    # Z(当前环境光照 R) - 光照强度检测
    #   数据类型：整数光照值
    #   属性值描述：val为原始光照值,v为实际光照值,单位:lux(勒克斯)
    #   测量范围：0-65535lux,从完全黑暗到强阳光
    #   传感器类型：光敏二极管或光敏电阻
    #   应用场景：自动调节照明,窗帘控制,节能管理
    #
    # V(电量 R) - 电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值(通常2000-4200,对应2.0V-4.2V)
    #               v为电量百分比[0,100],通过电压-百分比映射表转换
    #   低电报警：v<20时应提示更换电池
    #   电池类型：通常为CR2450或AA电池,根据产品设计而定
    "SL_SC_THL",
    # 多功能(CUBE)环境感应器 SL_SC_BE
    # IO口详细说明：
    # T(当前环境温度 R) - 温度检测传感器
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   CUBE特性：同SL_SC_THL规范,集成在CUBE多功能设备中
    #
    # H(当前环境湿度 R) - 湿度检测传感器
    #   数据类型：整数湿度值
    #   属性值描述：val为原始湿度值*10,v为实际湿度值,单位:%
    #   CUBE特性：同SL_SC_THL规范,与其他传感器集成
    #
    # Z(当前环境光照 R) - 光照强度检测
    #   数据类型：整数光照值
    #   属性值描述：val为原始光照值,v为实际光照值,单位:lux
    #   CUBE特性：同SL_SC_THL规范,支持智能场景联动
    #
    # V(电量 R) - 电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值,v为电量百分比[0,100]
    #   电池管理：同SL_SC_THL规范
    "SL_SC_BE",
}

# --- 空气质量感应器(CO2/TVOC/甲醛) ---
AIR_QUALITY_SENSOR_TYPES = {
    # 环境感应器(CO2+TVOC) SL_SC_CQ
    # IO口详细说明：
    # P1(当前环境温度 R) - 温度检测传感器
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   测量范围：通常-20℃到+60℃,精度±0.5℃
    #   环境补偿：温度数据用于CO2和TVOC传感器的环境补偿
    #
    # P2(当前环境湿度 R) - 湿度检测传感器
    #   数据类型：整数湿度值
    #   属性值描述：val为原始湿度值*10,v为实际湿度值,单位:%
    #   测量范围：0-100%,精度±3%
    #   环境补偿：湿度数据用于气体传感器的环境补偿算法
    #
    # P3(当前CO2浓度值 R) - 二氧化碳浓度检测
    #   数据类型：整数浓度值
    #   属性值描述：val为co2浓度值,v为实际浓度值,单位:ppm
    #   测量范围：400-5000ppm,精度±50ppm
    #   传感器类型：NDIR(非色散红外)CO2传感器
    #   健康标准：400-1000ppm优秀,1000-2000ppm良好,>2000ppm需通风
    #
    # P4(当前TVOC浓度值 R) - 总挥发性有机化合物浓度
    #   数据类型：整数浓度值
    #   属性值描述：val为原始浓度值*1000,v为实际浓度值,单位:mg/m³
    #   测量范围：0.001-60mg/m³
    #   传感器类型：金属氧化物半导体气体传感器
    #   数据处理：val需要除以1000得到实际浓度
    #   健康标准：<0.3mg/m³优秀,0.3-0.6mg/m³良好,>0.6mg/m³需通风
    #
    # P5(电量 R) - 主电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值,v为电量百分比[0,100]
    #   电池类型：通常为锂电池,支持长时间监测
    #
    # P6(USB供电电压 R) - USB充电检测
    #   数据类型：整数电压检测
    #   属性值描述：val>430表示USB供电充满,否则为电池供电
    #   供电逻辑：连接USB时忽略P5的电池电量,优先使用USB供电
    #   充电功能：支持USB充电,方便长期部署使用
    "SL_SC_CQ",
    # 环境感应器(CO2) SL_SC_CA
    # IO口详细说明：
    # P1(当前环境温度 R) - 温度检测传感器
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   功能：同SL_SC_CQ规范,用于CO2传感器温度补偿
    #
    # P2(当前环境湿度 R) - 湿度检测传感器
    #   数据类型：整数湿度值
    #   属性值描述：val为原始湿度值*10,v为实际湿度值,单位:%
    #   功能：同SL_SC_CQ规范,用于CO2传感器湿度补偿
    #
    # P3(当前CO2浓度值 R) - 二氧化碳浓度检测
    #   数据类型：整数浓度值
    #   属性值描述：val为co2浓度值,v为实际浓度值,单位:ppm
    #   专业特性：专门的CO2检测设备,精度更高
    #
    # P4(电量 R) - 电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值,v为电量百分比[0,100]
    #   电池管理：同SL_SC_CQ规范
    #
    # P5(USB供电电压 R) - USB充电检测
    #   数据类型：整数电压检测
    #   属性值描述：val>430表示供电工作,否则为未供电状态
    #   供电管理：同SL_SC_CQ规范
    "SL_SC_CA",
    # 气体感应器(甲醛) SL_SC_CH
    # IO口详细说明：
    # P1(甲醛浓度 R) - 甲醛浓度检测和告警
    #   数据类型：整数浓度值
    #   属性值描述：type&1==1表示超过告警门限,val为原始浓度值
    #               实际浓度=val/1000,单位:ug/m³(微克每立方米)
    #   传感器类型：电化学甲醛传感器,专门检测甲醛气体
    #   测量范围：0-5000ug/m³,精度±10%
    #   健康标准：<80ug/m³安全,80-100ug/m³注意,>100ug/m³危险
    #
    # P2(甲醛浓度告警门限 RW) - 告警阈值设置
    #   数据类型：整数门限值
    #   属性值描述：门限值,单位:ug/m³
    #   预设选项：不告警5000ug/m³, 中灵敏100ug/m³, 高灵敏80ug/m³
    #   下发命令：设置门限type=0xff,val=门限值
    #   建议设置：家庭环境建议设置为80-100ug/m³
    #
    # P3(警报音 RW) - 声音报警控制
    #   数据类型：整数开关控制
    #   属性值描述：type&1==1表示报警音响; type&1==0表示无报警音
    #   下发命令：开启报警音type=0x81,val=1; 关闭报警音type=0x80,val=0
    #   应用场景：可根据需要开启或关闭声音报警
    "SL_SC_CH",
}

# --- 合并的环境传感器类型(向后兼容) ---
EV_SENSOR_TYPES = BASIC_ENV_SENSOR_TYPES | AIR_QUALITY_SENSOR_TYPES
# --- 燃气感应器 ---
GAS_SENSOR_TYPES = {
    # 气体感应器(燃气) SL_SC_CP
    # IO口详细说明：
    # P1(燃气浓度 R) - 燃气浓度检测和告警
    #   数据类型：整数浓度值
    #   属性值描述：type&1==1表示超过告警门限有告警; type&1==0表示浓度正常
    #               val为当前燃气浓度值，单位通常为ppm或%LEL
    #   传感器类型：半导体气体传感器或催化燃烧式传感器
    #   检测气体：天然气(甲烷)、液化气(丙烷、丁烷)、煤气等可燃气体
    #   响应时间：通常<30秒，快速检测泄漏
    #   应用场景：厨房、锅炉房等燃气使用区域的安全监控
    #
    # P2(燃气浓度告警门限 RW) - 告警阈值设置
    #   数据类型：整数门限值
    #   属性值描述：门限值，单位与P1相同
    #   预设门限：
    #     低灵敏度: 150ppm - 适用于通风良好的环境
    #     中灵敏度: 120ppm - 标准家用环境推荐设置
    #     高灵敏度: 90ppm - 密闭空间或高安全要求场所
    #   下发命令：设置门限type=0xff,val=门限值
    #   安全建议：根据环境特点和安全要求选择合适的灵敏度
    #
    # P3(警报音 RW) - 声音报警控制
    #   数据类型：整数开关控制
    #   属性值描述：type&1==1表示报警音响; type&1==0表示无报警音
    #   下发命令：开启报警音type=0x81,val=1; 关闭报警音type=0x80,val=0
    #   报警模式：检测到燃气泄漏时发出高分贝报警声
    #   应用建议：建议保持报警音开启，确保及时发现危险
    "SL_SC_CP"
}

# --- 噪音感应器 ---
NOISE_SENSOR_TYPES = {
    # 噪音感应器 SL_SC_CN
    # IO口详细说明：
    # P1(噪音值 R) - 环境噪音检测和告警
    #   数据类型：整数噪音值
    #   属性值描述：type&1==1表示超过告警门限; type&1==0表示未超过门限
    #               val为当前噪音值，单位:分贝(dB)
    #   测量范围：通常30-120dB，覆盖从安静环境到噪音环境
    #   采样方式：A加权声级，符合人耳听觉特性
    #   应用场景：噪音监测、睡眠环境监控、工作环境评估
    #
    # P2(告警门限设置 RW) - 噪音告警阈值配置
    #   数据类型：32位复合配置参数
    #   参数结构：val为32位值，格式定义如下:
    #     DD(bit0-7): 噪音门限值，单位:分贝(dB)
    #     CC(bit8-15): 采样值1 - 用于噪音检测算法的参数调节
    #     BB(bit16-23): 采样值2 - 用于噪音检测算法的参数调节
    #     AA(bit24-31): 保留位，未使用
    #   常用门限：
    #     40dB: 安静环境(图书馆级别)
    #     55dB: 日常环境(正常交谈级别)
    #     70dB: 嘈杂环境(交通噪音级别)
    #   下发命令：设置门限type=0xff,val=配置参数
    #
    # P3(报警设置 RW) - 噪音报警参数配置
    #   数据类型：32位复合控制参数
    #   属性值描述：type&1==1表示报警状态; type&1==0表示正常状态
    #   参数结构：val为32位值，格式为0xAABBCCDD:
    #     AABB(bit16-31): 持续时长，超过门限的持续时间(秒)
    #     CC(bit8-15): 声音强度，报警音量级别[0,15]
    #     DD(bit0-7): 音频模式，选择不同的报警音效
    #   下发命令：
    #     启用报警type=0x81,val=报警参数
    #     关闭报警type=0x80,val=0
    #     设置报警参数type=0xff,val=0xAABBCCDD
    #
    # P4(噪音校正值 RW) - 传感器校准参数
    #   数据类型：整数校正值
    #   属性值描述：校正值，取值范围[-128,127]
    #   校正原理：用于补偿传感器的系统误差或环境因素影响
    #   校正方法：实测值 = 原始值 + 校正值
    #   使用建议：在标准环境下进行校准，提高测量精度
    #   下发命令：设置校正值type=0xff,val=校正值
    "SL_SC_CN"
}
# --- 电量计量器 ---
POWER_METER_TYPES = {
    # ELIQ电量计量器 ELIQ_EM
    # IO口详细说明：
    # EPA(平均功率 R) - 电力消耗平均功率检测
    #   数据类型：整数功率值
    #   属性值描述：val表示平均功率值，单位:瓦特(W)
    #   测量原理：通过电流互感器检测电流，计算实时功率并求平均值
    #   统计周期：通常以15分钟或1小时为周期计算平均值
    #   应用场景：家庭或办公室总体用电监控，用电量分析
    #   精度：通常±2%，满足家用电量监测需求
    "ELIQ_EM",
    # DLT电量计量器 V_DLT645_P
    # IO口详细说明：
    # EE(用电量 R) - 累计用电量统计
    #   数据类型：IEEE754浮点数的32位整数表示
    #   属性值描述：val为IEEE754浮点数32位整数表示,v为浮点数,单位:度(kwh)
    #   数据转换：v值可以直接使用,若不存在v值则需要手动转换
    #              其值类型为IEEE 754浮点数的32位整数布局
    #   累计逻辑：记录设备接入以来的总用电量，只增不减
    #   重置方式：通常无法手动重置，或需要特殊的管理员操作
    #
    # EP(功率 R) - 当前实时功率检测
    #   数据类型：浮点数功率值
    #   属性值描述：v为浮点数,单位:瓦特(w)
    #   测量范围：根据计量器规格，通常支持几千瓦的测量范围
    #   更新频率：实时更新，通常1秒或更快的采样频率
    #   应用：实时监控电器设备的功率消耗，识别高耗电设备
    "V_DLT645_P",
}

# --- 语音小Q ---
VOICE_SENSOR_TYPES = {
    # 语音小Q SL_SC_CV
    # IO口详细说明：
    # 语音识别和控制功能
    # 注意：此设备的具体IO口定义需要根据实际产品规格确定
    # 通常包括以下功能：
    # - 语音识别状态：检测是否正在进行语音识别
    # - 语音命令反馈：识别到的语音命令类型
    # - 音量控制：调节语音反馈的音量
    # - 唤醒状态：语音唤醒词检测状态
    # - 网络状态：语音服务的网络连接状态
    # 具体的IO口名称和参数需要参考设备的详细技术文档
    "SL_SC_CV"
}

# ================= 空气净化器系列 (Air Purifier Series) =================
AIR_PURIFIER_TYPES = {
    # 空气净化器 OD_MFRESH_M8088
    # IO口详细说明：
    # O(开关 RW) - 空气净化器总开关
    #   数据类型：整数开关控制
    #   属性值描述：type&1==1表示打开; type&1==0表示关闭
    #   下发命令：开启type=0x81,val=1; 关闭type=0x80,val=0
    #   功能说明：控制空气净化器的整体运行状态
    #
    # RM(运行模式 RW) - 净化器工作模式选择
    #   数据类型：整数模式值
    #   模式定义：
    #     0: auto自动模式 - 根据空气质量自动调节风量
    #     1: 风量档位1 - 低风量，静音运行
    #     2: 风量档位2 - 中等风量，平衡净化效果和噪音
    #     3: 风量档位3 - 高风量，快速净化
    #     4: 风量最大档 - 最高风量，极速净化模式
    #     5: 睡眠模式 - 超静音运行，适合夜间使用
    #   下发命令：设置模式type=0xff,val=模式值
    #   智能控制：自动模式下根据传感器数据智能调节
    #
    # T(温度 R) - 环境温度检测
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   测量范围：通常-10℃到+50℃,精度±1℃
    #   数据处理：val需要除以10得到实际温度
    #   环境监测：实时监控室内温度变化
    #
    # H(湿度 R) - 环境湿度检测
    #   数据类型：整数湿度值
    #   属性值描述：val为原始湿度值*10,v为实际湿度值,单位:%
    #   测量范围：0-100%,精度±5%
    #   数据处理：val需要除以10得到实际湿度
    #   舒适度：最佳湿度范围40-60%
    #
    # PM(PM2.5 R) - PM2.5颗粒物浓度检测
    #   数据类型：整数浓度值
    #   属性值描述：val表示PM2.5浓度值,v为实际浓度值,单位:μg/m³
    #   测量范围：0-500μg/m³,检测精度±10μg/m³
    #   健康标准：
    #     0-35μg/m³: 优秀
    #     35-75μg/m³: 良好
    #     75-115μg/m³: 轻度污染
    #     >115μg/m³: 中度及以上污染
    #   净化效果：实时反映空气净化器的净化效果
    #
    # FL(滤芯寿命 R) - 滤芯剩余使用寿命
    #   数据类型：整数小时值
    #   属性值描述：val表示滤芯剩余寿命,单位:小时,范围:0~4800h
    #   寿命计算：根据使用时长和污染程度综合计算
    #   更换提醒：寿命<200h时应提醒更换滤芯
    #   维护建议：定期检查滤芯状态，及时更换确保净化效果
    #
    # UV(紫外线指数 R) - 紫外线强度检测
    #   数据类型：整数紫外线指数
    #   属性值描述：val表示紫外线指数值
    #   测量说明：如果设备配备UV-C紫外线杀菌灯，此值表示杀菌强度
    #   应用场景：部分高端净化器配备紫外线杀菌功能
    "OD_MFRESH_M8088",
}

# ================= 485控制器系列 (485 Controller Series) =================
CONTROLLER_485_TYPES = {
    # 485控制器 - 特殊设备,设备属性集合为实际接入的设备有关
    # 可能出现属性:
    # P1(值 R) - val为IEEE754浮点数32位整数表示,v为浮点数
    # Lx(开关 RW) - x为数字,如L1/L3等,type&1==1打开/0关闭
    # EE/EEx(用电量 R) - val为IEEE754浮点数32位整数表示,v为浮点数,单位度(kwh)
    # EP(功率 R) - v为浮点数,单位w
    # EPF/EPFx(功率因数 R) - 功率因数,单位无
    # EF/EFx(交流电频率 R) - 交流电频率,单位HZ
    # EI/EIx(电流 R) - 电流,单位A
    # EV/EVx(电压 R) - 电压,单位V
    # T(温度 R) - val原始温度值,v实际值(单位℃)
    # H(湿度 R) - val原始湿度值,v实际值(单位%)
    # PM(PM2.5 R) - val表示PM2.5值,v实际值(单位ug/m³)
    # PMx(PM10 R) - val表示PM10值,v实际值(单位ug/m³)
    # COPPM(一氧化碳 R) - val表示co浓度值,v实际值(单位ppm)
    # CO2PPM(二氧化碳 R) - val表示co2浓度值,v实际值(单位ppm)
    # CH20PPM(甲醛 R) - val表示甲醛原始浓度值,v实际值(单位ppm)
    # O2VOL(氧气 R) - val表示氧气原始浓度值,v实际值(单位vol%)
    # NH3PPM(氨气 R) - val表示氨气原始浓度值,v实际值(单位ppm)
    # H2SPPM(硫化氢 R) - val表示硫化氢原始浓度值,v实际值(单位ppm)
    # TVOC(TVOC R) - val表示TVOC原始浓度值,v实际值(单位mg/m³)
    # PHM(噪音 R) - val表示噪音原始值,v实际值(单位dB)
    # SMOKE(烟雾 R) - val表示烟雾原始浓度值,v实际值(单位ppm)
    "V_485_P",
}

# ================= 报警器系列 (Alarm Series) =================
ALARM_TYPES = {
    # 智能报警器(CoSS版) SL_ALM
    # IO口详细说明：
    # P1(播放控制 RW) - 报警器播放状态和参数控制
    #   数据类型：32位复合控制参数
    #   属性值描述：type&1==1表示正在播放; type&1==0表示没有播放
    #   参数结构：val为32位值,格式为0xAABBCCDD
    #     AABB(bit16-31): 播放时间(秒)或循环次数，具体含义根据音频类型而定
    #       - 短音频: 表示循环播放次数
    #       - 长音频: 表示播放持续时间(秒)
    #     CC(bit8-15): 音量级别[0,16]，0为静音，16为最大音量
    #     DD(bit0-7): 音频序号，对应预设的音频文件编号
    #   下发命令：
    #     开启播放type=0x81,val=播放参数
    #     停止播放type=0x80,val=0
    #     设置播放参数type=0xff,val=0xAABBCCDD
    #   音频管理：设备内置多种报警音效，可通过序号选择
    #
    # P2(音量控制 RW) - 报警器音量独立控制
    #   数据类型：整数音量控制
    #   属性值描述：type&1==1表示正常音量模式; type&1==0表示静音模式
    #   音量设置：val表示音量值，仅支持16级音量调节
    #   音量编码：使用高4位编码，val = (volume_level << 4)
    #     例如: 音量级别8 → val = 0x80
    #     例如: 音量级别12 → val = 0xC0
    #   下发命令：
    #     启用音量type=0x81,val=音量值
    #     静音模式type=0x80,val=0
    #     设置音量type=0xff,val=音量值
    #   静音功能：静音模式下报警器仍可接收控制，但不发声
    "SL_ALM",
    # 多功能报警器 LSSSMINIV1
    # IO口详细说明：
    # 多功能报警器设备，具体IO口定义根据实际产品规格确定
    # 通常包括报警播放、音量控制、状态指示等基础功能
    # 可能集成温湿度检测、烟雾检测等传感器功能
    # 具体功能需要根据设备实际规格文档确定
    "LSSSMINIV1",
}

# ================= 第三方设备通过控制器接入 (Third-party Devices) =================
THIRD_PARTY_CONTROLLER_TYPES = {
    # 智控器空调面板 - 参考CLIMATE_TYPES中V_AIR_P定义
    "V_AIR_P",
    # 新风系统控制器 - 参考CLIMATE_TYPES中V_FRESH_P定义
    "V_FRESH_P",
    # 485控制器 - 支持多种第三方传感器和控制器
    "V_485_P",
    # 新风系统(深圳建设新风) - 参考V_AIR_P属性
    "V_SZJSXR_P",
    # YORK温控器 - 参考V_AIR_P属性
    "V_T8600_P",
    # X100人脸识别可视门锁
    "V_DUNJIA_P",
    # 极速开关组
    "V_HG_L",
    # 极速虚拟设备
    "V_HG_XX",
}

# ================= 温控系列 (Climate Series) =================
CLIMATE_TYPES = {
    # 智控器空调面板 V_AIR_P
    # IO口详细说明：
    # O(开关 RW) - 系统总开关控制
    #   数据类型：整数开关控制
    #   属性值描述：type&1==1表示打开; type&1==0表示关闭
    #   下发命令：开机type=0x81,val=1; 关机type=0x80,val=0
    #   功能说明：控制空调系统的总电源开关
    #
    # MODE(模式 RW) - HVAC工作模式控制
    #   数据类型：整数模式值
    #   模式定义：1:Auto自动模式, 2:Fan吹风模式, 3:Cool制冷模式, 4:Heat制热模式, 5:Dry除湿模式
    #   下发命令：设置模式type=0xff,val=模式值
    #   自动模式：系统根据目标温度和当前温度自动选择制冷或制热
    #
    # F(风速 RW) - 风扇速度控制
    #   数据类型：整数风速值
    #   速度分级：val<30低档风速, val<65中档风速, val>=65高档风速
    #   下发命令：设置风速type=0xff,val=风速值
    #   推荐值：低档15, 中档45, 高档75
    #
    # tT(目标温度 RW) - 设定目标温度
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   温度范围：通常16-30℃,精度0.1℃
    #   下发命令：设置温度type=0xff,val=温度值*10
    #   示例：设置25.5℃,下发val=255
    #
    # T(当前温度 R) - 室内当前温度检测
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   传感器类型：内置温度传感器,实时监测室内温度
    #   精度：±0.5℃,用于温控反馈调节
    "V_AIR_P",
    # 地暖温控面板 SL_CP_DN
    # IO口详细说明：
    # P1(系统配置 RW) - 系统开关和参数配置
    #   数据类型：32位配置参数
    #   开关控制：type最低位代表系统开机状态,0:OFF关闭, 1:ON开启
    #   配置参数：val为32位参数配置,包含工作模式、限温值、控温模式、时段模式等
    #   位字段结构：具体位定义根据设备规格确定
    #   下发命令：开机type=0x81,val=配置参数; 关机type=0x80,val=配置参数
    #
    # P2(继电器开关 RW) - 地暖继电器控制
    #   数据类型：整数开关控制
    #   属性值描述：type&1==1表示打开继电器; type&1==0表示关闭继电器
    #   下发命令：开启type=0x81,val=1; 关闭type=0x80,val=0
    #   功能说明：直接控制地暖系统的加热继电器
    #
    # P3(目标温度 RW) - 地暖目标温度设置
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   温度范围：通常5-35℃,适合地暖系统
    #   下发命令：设置温度type=0xff,val=温度值*10
    #
    # P4(室内温度 R) - 室内当前温度检测
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   传感器位置：室内空气温度传感器
    #
    # P5(底版温度 R) - 地暖底版温度检测
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值/10,v为实际温度值,单位:℃
    #   传感器位置：地暖管道或加热底版的温度传感器
    #   保护功能：防止底版过热,保护地暖系统
    "SL_CP_DN",
    # 空调控制面板 SL_UACCB
    # IO口详细说明：
    # P1(开关 RW) - 空调系统开关
    #   数据类型：整数开关控制
    #   属性值描述：type&1==1表示打开; type&1==0表示关闭
    #   下发命令：开机type=0x81,val=1; 关机type=0x80,val=0
    #
    # P2(模式 RW) - 空调工作模式
    #   数据类型：整数模式值
    #   模式定义：1:Auto自动, 2:Fan吹风, 3:Cool制冷, 4:Heat制热, 5:Dry除湿
    #   下发命令：设置模式type=0xff,val=模式值
    #
    # P3(目标温度 RW) - 空调目标温度
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   下发命令：设置温度type=0xff,val=温度值*10
    #
    # P4(风速 RW) - 空调风扇速度
    #   数据类型：整数风速值
    #   速度分级：val<30低档, val<65中档, val>=65高档
    #   下发命令：设置风速type=0xff,val=风速值
    #
    # P6(当前温度 R) - 室内当前温度
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   传感器功能：实时监测室内温度,用于温控反馈
    "SL_UACCB",
    # 温控阀门 SL_CP_VL
    # IO口详细说明：
    # P1(开关及系统配置 RW) - 阀门开关和系统配置
    #   数据类型：32位配置参数
    #   开关控制：type&1==1表示打开; type&1==0表示关闭
    #   配置参数：val为配置参数,包含工作模式设置和儿童锁设置
    #   下发命令：开启type=0x81,val=配置值; 关闭type=0x80,val=配置值
    #
    # P2(阀门状态1 R) - 第一路阀门状态
    #   数据类型：整数状态值
    #   功能说明：阀门1状态(盘管的冷阀或盘管的冷热阀)
    #   状态指示：显示阀门的开启程度或工作状态
    #
    # P3(阀门状态2 R) - 第二路阀门状态
    #   数据类型：整数状态值
    #   功能说明：阀门2状态(盘管的热阀或地暖阀)
    #   双阀控制：支持冷热水分离控制或地暖独立控制
    #
    # P4(当前温度 R) - 室内当前温度
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   温度检测：用于温控阀门的反馈控制
    #
    # P5(告警 R) - 系统告警信息
    #   数据类型：整数告警位掩码
    #   告警类型：val告警信息位字段定义
    #     bit0:高温保护告警, bit1:低温保护告警, bit4:低电量告警等
    #   告警处理：根据不同位的状态判断具体告警类型
    #
    # P6(电量 R) - 电池电量状态
    #   数据类型：整数电压值
    #   属性值描述：val为原始电压值,v为电量百分比[0,100]
    #   电池类型：通常为AA或锂电池,支持长期工作
    "SL_CP_VL",
    # 新风系统 SL_TR_ACIPM
    # IO口详细说明：
    # P1(系统配置 RW) - 新风系统开关和模式配置
    #   数据类型：32位配置参数
    #   开关控制：type&1==1表示打开; type&1==0表示关闭
    #   模式配置：bit13-14定义工作模式
    #     1:自动模式, 2:手动模式, 3:定时模式
    #   下发命令：设置配置type=0xff,val=配置参数
    #
    # P2(风速状态 RW) - 新风系统风速控制
    #   数据类型：整数风速档位
    #   档位定义：0:关闭, 1:1档风速, 2:2档风速, 3:3档风速
    #   下发命令：设置风速type=0xff,val=档位值
    #   风速控制：逐级调节新风量大小
    #
    # P3(设置VOC RW) - VOC浓度阈值设置
    #   数据类型：整数浓度值
    #   属性值描述：val值缩小10倍为真实值,v为实际值,单位:ppm
    #   功能说明：设置TVOC浓度报警阈值,超过阈值自动加大风速
    #   下发命令：设置阈值type=0xff,val=阈值*10
    #
    # P4(VOC R) - 当前VOC浓度检测
    #   数据类型：整数浓度值
    #   属性值描述：val为原始voc值,v为实际值,单位:ppm
    #   传感器类型：TVOC传感器,检测总挥发性有机化合物
    #
    # P5(PM2.5 R) - PM2.5浓度检测
    #   数据类型：整数浓度值
    #   属性值描述：val为原始pm2.5值,v为实际值,单位:ug/m³
    #   传感器类型：激光PM2.5传感器,检测细颗粒物
    #
    # P6(当前温度 R) - 环境温度检测
    #   数据类型：整数温度值
    #   属性值描述：val除以10为真实温度值,v为实际值,单位:℃
    #   温度监测：监测新风系统进风温度
    "SL_TR_ACIPM",
    # 风机盘管 SL_CP_AIR
    # IO口详细说明：
    # P1(系统配置 RW) - 风机盘管系统配置
    #   数据类型：32位配置参数
    #   开关控制：type最低位代表系统开机状态,0:OFF关闭, 1:ON开启
    #   配置内容：val为32位配置参数,包含
    #     风速设置、工作模式、外置探头回差、温度修正、停电后背光状态等
    #   下发命令：设置配置type=0xff,val=配置参数
    #
    # P2(阀门状态 RW) - 水阀控制
    #   数据类型：整数开关控制
    #   状态值：0x80表示阀门关闭, 0x81表示阀门开启
    #   下发命令：关闭阀门type=0x80,val=0; 开启阀门type=0x81,val=1
    #   功能说明：控制冷热水阀门,调节盘管水流
    #
    # P3(风速状态 R) - 当前风扇速度状态
    #   数据类型：整数档位值
    #   档位定义：0:自动档, 1:低速档, 2:中速档, 3:高速档
    #   状态反馈：显示风机当前运行档位
    #
    # P4(目标温度 RW) - 设定目标温度
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   下发命令：设置温度type=0xff,val=温度值*10
    #
    # P5(室内温度 R) - 室内当前温度
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值/10,v为实际温度值,单位:℃
    #   传感器功能：实时监测室内温度,用于温控反馈
    "SL_CP_AIR",
    # 艾弗纳KV11(新风) V_FRESH_P
    # IO口详细说明：
    # O(开关 RW) - 新风系统总开关
    #   数据类型：整数开关控制
    #   属性值描述：type&1==1表示打开; type&1==0表示关闭
    #   下发命令：开机type=0x81,val=1; 关机type=0x80,val=0
    #
    # MODE(模式 RW) - 新风系统工作模式
    #   数据类型：整数模式位掩码
    #   模式定义：0-1位和2-3位分别控制不同功能
    #     0-1位：0x01手动模式, 0x10定时模式
    #     2-3位：0x01热交换模式, 0x10防霜冻模式
    #   下发命令：设置模式type=0xff,val=模式值
    #
    # F1(送风机 RW) - 送风风扇速度控制
    #   数据类型：整数风速值
    #   速度分级：0:停止, val<30:低档, val<65:中档, val>=65:高档
    #   下发命令：设置风速type=0xff,val=风速值
    #   功能说明：控制室外到室内的送风风扇
    #
    # F2(排风机 RW) - 排风风扇速度控制
    #   数据类型：整数风速值
    #   速度分级：0:停止, val<30:低档, val<65:中档, val>=65:高档
    #   下发命令：设置风速type=0xff,val=风速值
    #   功能说明：控制室内到室外的排风风扇
    #
    # T(当前温度 R) - 环境温度检测
    #   数据类型：整数温度值
    #   属性值描述：val/10为真实温度值,v为实际值,单位:℃
    #   温度监测：监测新风系统的环境温度
    "V_FRESH_P",
    # 超能面板PRO(温控) SL_NATURE - 多功能温控面板
    # IO口详细说明：
    # P1(开关 RW) - 系统总开关
    #   数据类型：整数开关控制
    #   属性值描述：type&1==1表示打开; type&1==0表示关闭
    #   下发命令：开机type=0x81,val=1; 关机type=0x80,val=0
    #
    # P2(阀门状态1 R) - 第一路阀门状态
    #   数据类型：整数状态值
    #   功能说明：阀门1状态(盘管的冷阀或盘管的冷热阀)
    #   状态指示：显示第一路水阀的工作状态
    #
    # P3(阀门状态2 R) - 第二路阀门状态
    #   数据类型：整数状态值
    #   功能说明：阀门2状态(盘管的热阀或地暖阀)
    #   状态指示：显示第二路水阀的工作状态
    #
    # P4(T当前温度 R) - 室内当前温度
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   传感器功能：实时监测室内温度
    #
    # P5(设备种类 R) - 设备类型识别
    #   数据类型：整数设备类型
    #   属性值描述：val&0xFF指示设备种类,3或6表示温控面板
    #   类型识别：用于区分超能面板的不同功能版本
    #
    # P6(CFG配置 RW) - 设备工作模式配置
    #   数据类型：整数配置参数
    #   配置说明：(val>>6)&0x7指示设备类型
    #     0:新风模式, 1:风机盘管(单阀)模式, 2:水地暖模式
    #     3:风机盘管+水地暖模式, 4:风机盘管(双阀)模式, 5:水地暖+新风模式
    #   下发命令：设置配置type=0xff,val=配置值
    #
    # P7(MODE模式 RW) - HVAC工作模式
    #   数据类型：整数模式值
    #   模式定义：3:Cool制冷, 4:Heat制热, 7:DN地暖, 8:DN_Heat地暖+空调
    #   下发命令：设置模式type=0xff,val=模式值
    #
    # P8(tT目标温度 RW) - 设定目标温度
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   下发命令：设置温度type=0xff,val=温度值*10
    #
    # P9(tF目标风速 RW) - 设定目标风速
    #   数据类型：整数风速值
    #   风速分级：0:Stop停止, 0<val<30:Low低速, 30<=val<65:Medium中速
    #            65<=val<100:High高速, 101:Auto自动
    #   下发命令：设置风速type=0xff,val=风速值
    #
    # P10(F当前风速 R) - 当前风扇速度状态
    #   数据类型：整数风速状态
    #   状态反馈：显示风机当前实际运行状态
    "SL_NATURE",
    # 星玉地暖 SL_DN
    # IO口详细说明：
    # P1(开关 RW) - 地暖系统开关和温度限制
    #   数据类型：32位配置参数
    #   开关控制：type&1==1表示打开; type&1==0表示关闭
    #   温度限制：val的0-5位表示温度限制,实际限制温度=17+val(范围17-80℃)
    #   下发命令：开启type=0x81,val=配置值; 关闭type=0x80,val=配置值
    #
    # P2(模式 RW) - 地暖工作模式和参数
    #   数据类型：32位配置参数
    #   回差设置：6-9位表示回差参数,使用公式(v+1)*0.5作为回差参数
    #   控温模式：10-11位控温模式,0/1:in室内传感器, 2:out室外传感器, 3:all双传感器
    #   下发命令：设置模式type=0xff,val=配置参数
    #
    # P3(阀门状态 R) - 地暖阀门状态和电量统计
    #   数据类型：整数状态值
    #   阀门状态：0x80表示阀门关闭, 0x81表示阀门开启
    #   电量统计：val为浮点数值,表示累计电量统计(如果支持)
    #
    # P4(室内温度 R) - 室内当前温度
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值/10,v为实际温度值,单位:℃
    #   传感器位置：室内空气温度传感器
    #
    # P8(目标温度 RW) - 地暖目标温度
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值/10,v为实际温度值,单位:℃
    #   温度范围：适合地暖系统的温度范围
    #   下发命令：设置温度type=0xff,val=温度值*10
    #
    # P9(底版温度 R) - 地暖底版温度
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值/10,v为实际温度值,单位:℃
    #   传感器位置：地暖管道或底版温度传感器
    #   保护功能：防止地暖系统过热
    "SL_DN",
    # 星玉温控面板(Nature Thermostat) SL_FCU
    # IO口详细说明：
    # P1(开关 RW) - 温控面板总开关
    #   数据类型：整数开关控制
    #   属性值描述：type&1==1表示打开; type&1==0表示关闭
    #   下发命令：开机type=0x81,val=1; 关机type=0x80,val=0
    #
    # P2(阀门状态1 R) - 第一路阀门状态
    #   数据类型：整数状态值
    #   功能说明：阀门1状态(盘管的冷阀或盘管的冷热阀)
    #   状态监测：实时显示第一路水阀开关状态
    #
    # P3(阀门状态2 R) - 第二路阀门状态
    #   数据类型：整数状态值
    #   功能说明：阀门2状态(盘管的热阀或地暖阀)
    #   状态监测：实时显示第二路水阀开关状态
    #
    # P4(T当前温度 R) - 室内当前温度
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   传感器功能：实时监测室内环境温度
    #
    # P6(CFG配置 RW) - 设备类型配置
    #   数据类型：整数配置参数
    #   配置说明：(val>>6)&0x7指示设备类型
    #   设备类型：同SL_NATURE规范,支持多种工作模式
    #   下发命令：设置配置type=0xff,val=配置值
    #
    # P7(MODE模式 RW) - HVAC工作模式
    #   数据类型：整数模式值
    #   模式定义：1:Auto自动, 2:Fan风扇, 3:Cool制冷, 4:Heat制热
    #            7:DN地暖, 8:DN_Heat地暖+空调组合模式
    #   下发命令：设置模式type=0xff,val=模式值
    #
    # P8(tT目标温度 RW) - 设定目标温度
    #   数据类型：整数温度值
    #   属性值描述：val为原始温度值*10,v为实际温度值,单位:℃
    #   下发命令：设置温度type=0xff,val=温度值*10
    #
    # P9(tF目标风速 RW) - 设定目标风速
    #   数据类型：整数风速值
    #   风速分级：0:Stop, 0<val<30:Low, 30<=val<65:Medium, 65<=val<100:High, 101:Auto
    #   下发命令：设置风速type=0xff,val=风速值
    #
    # P10(F当前风速 R) - 当前风扇速度状态
    #   数据类型：整数风速状态
    #   状态反馈：显示风机当前实际运行档位
    "SL_FCU",
    # 第三方温控设备 - 新风系统(深圳建设新风) V_SZJSXR_P
    # IO口详细说明：参考V_AIR_P属性定义,第三方设备通过智控器接入
    "V_SZJSXR_P",
    # 第三方温控设备 - YORK温控器 V_T8600_P
    # IO口详细说明：参考V_AIR_P属性定义,第三方设备通过智控器接入
    "V_T8600_P",
}

# ================= 温控器映射 (Climate Mappings) =================
# 用于在 Home Assistant 的标准 HVAC 模式与 LifeSmart 的私有模式值之间进行转换。

# --- V_AIR_P (智控器空调面板) 模式映射 ---
LIFESMART_F_HVAC_MODE_MAP = {
    1: HVACMode.AUTO,
    2: HVACMode.FAN_ONLY,
    3: HVACMode.COOL,
    4: HVACMode.HEAT,
}
REVERSE_F_HVAC_MODE_MAP = {v: k for k, v in LIFESMART_F_HVAC_MODE_MAP.items()}

# --- SL_UACCB, SL_NATURE, SL_FCU 等设备的模式映射 ---
# 这个映射包含了地暖等特殊模式
LIFESMART_HVAC_MODE_MAP = {
    1: HVACMode.AUTO,
    2: HVACMode.FAN_ONLY,
    3: HVACMode.COOL,
    4: HVACMode.HEAT,
    5: HVACMode.DRY,
    7: HVACMode.HEAT,  # SL_NATURE/FCU 地暖模式
    8: HVACMode.HEAT_COOL,  # SL_NATURE/FCU 地暖+空调模式
}
# 注意：由于一个HA模式可能对应多个设备模式，反向映射只用于那些没有歧义的设备
REVERSE_LIFESMART_HVAC_MODE_MAP = {
    HVACMode.AUTO: 1,
    HVACMode.FAN_ONLY: 2,
    HVACMode.COOL: 3,
    HVACMode.HEAT: 4,  # 默认将制热映射回 4
    HVACMode.DRY: 5,
    HVACMode.HEAT_COOL: 8,
}


# --- SL_CP_AIR (风机盘管) 模式与风速映射 (来自P1 bitmask) ---
LIFESMART_CP_AIR_HVAC_MODE_MAP = {
    0: HVACMode.COOL,
    1: HVACMode.HEAT,
    2: HVACMode.FAN_ONLY,
}
REVERSE_LIFESMART_CP_AIR_HVAC_MODE_MAP = {
    v: k for k, v in LIFESMART_CP_AIR_HVAC_MODE_MAP.items()
}

# --- SL_TR_ACIPM (新风) 风速映射 ---
LIFESMART_ACIPM_FAN_MAP = {
    FAN_LOW: 1,
    FAN_MEDIUM: 2,
    FAN_HIGH: 3,
}
REVERSE_LIFESMART_ACIPM_FAN_MAP = {v: k for k, v in LIFESMART_ACIPM_FAN_MAP.items()}

# --- SL_CP_AIR (风机盘管) 风速映射 (P1 bitmask) ---
LIFESMART_CP_AIR_FAN_MAP = {
    FAN_AUTO: 0,
    FAN_LOW: 1,
    FAN_MEDIUM: 2,
    FAN_HIGH: 3,
}
REVERSE_LIFESMART_CP_AIR_FAN_MAP = {v: k for k, v in LIFESMART_CP_AIR_FAN_MAP.items()}

# --- SL_NATURE / SL_FCU (超能面板) 风速映射 (tF) ---
LIFESMART_TF_FAN_MAP = {
    FAN_AUTO: 101,
    FAN_LOW: 15,
    FAN_MEDIUM: 45,
    FAN_HIGH: 75,
}
REVERSE_LIFESMART_TF_FAN_MODE_MAP = {v: k for k, v in LIFESMART_TF_FAN_MAP.items()}

# --- V_AIR_P 风速映射 (F) ---
LIFESMART_F_FAN_MAP = {
    FAN_LOW: 15,
    FAN_MEDIUM: 45,
    FAN_HIGH: 75,
}
REVERSE_LIFESMART_F_FAN_MODE_MAP = {v: k for k, v in LIFESMART_F_FAN_MAP.items()}

# ================= 门锁系列 (Lock Series) =================
LOCK_TYPES = {
    # 智能门锁LS SL_LK_LS
    # IO口详细说明：
    # EVTLO(解锁事件 R) - 门锁解锁事件检测
    #   数据类型：整数事件类型
    #   属性值描述：val值定义如下解锁方式:
    #     0:None(无), 1:Password(密码), 2:Fingerprint(指纹), 3:NFC(刷卡)
    #     4:Keys(钥匙), 5:Remote(远程), 6:12V Signal(12V信号), 7:App(应用)
    #     8:Bluetooth(蓝牙), 9:Manual(手动), 15:Error(错误)
    #   事件机制：解锁时触发相应事件值，一定时间后自动清零
    #   安全应用：可记录不同解锁方式的使用情况，用于安全审计
    #
    # EVTOP(操作记录 R) - 门锁操作记录详细信息
    #   数据类型：32位组合数据
    #   数据编码：[1Byte记录类型][2Byte用户id][1Byte用户flag]
    #   记录类型：操作的具体类型（如添加用户、删除用户、修改密码等）
    #   用户标志：bit01=11表示管理员，01表示普通用户，00表示已删除用户
    #   功能用途：提供详细的门锁操作历史记录，用于管理和审计
    #   数据保存：记录会保存一段时间，可用于历史查询和安全分析
    #
    # HISLK(历史开锁 R) - 最近一次开锁详细信息
    #   数据类型：32位组合数据
    #   数据格式：bit0~11(用户编号) bit12~15(开锁方式) bit16~27(用户编号) bit28~31(开锁方式)
    #   开锁方式：0:无效, 1:密码, 2:指纹, 3:刷卡, 4:钥匙, 5:远程, 6:12V信号, 7:App, 8:蓝牙, 9:手动
    #   用户编号：具体的用户ID，用于识别是哪个用户进行的开锁操作
    #   信息保存：存储最近一次成功开锁的完整信息，包括用户和方式
    #   安全价值：可与EVTLO配合使用，提供更详细的开锁历史信息
    #
    # EVTBEL(门铃消息 R) - 门铃按钮消息检测（仅C100/C200门锁）
    #   数据类型：二进制状态
    #   属性值描述：type%2=1表示有门铃消息，type%2=0表示无消息
    #   触发条件：当有人按下门锁上的门铃按钮时触发
    #   适用设备：主要用于C100、C200等带门铃功能的智能门锁
    #   应用场景：可用于门铃通知、访客记录等功能
    #   事件处理：消息触发后需要及时处理，避免漏掉访客信息
    #
    # ALM(报警事件 R) - 门锁安全报警检测
    #   数据类型：整数报警类型
    #   属性值描述：val值定义如下报警类型:
    #     0:无报警, 1:多次密码错误, 2:多次指纹错误, 3:撬锁报警
    #     4:门未关好, 5:电量低报警, 6:其他异常
    #   报警逻辑：触发报警时设置对应值，需要手动或自动清除
    #   安全功能：实时监控门锁安全状态，及时发现异常情况
    #
    # BAT(电量 R) - 门锁电池电量状态
    #   数据类型：整数电量百分比
    #   属性值描述：val为电量百分比[0,100]，100表示满电，0表示电量耗尽
    #   电池类型：通常为AA碱性电池或锂电池组，根据门锁型号而定
    #   低电提醒：电量<20%时应及时更换电池，避免影响门锁正常使用
    #   监控建议：定期检查电量状态，建立电池更换提醒机制
    "SL_LK_LS",
    # 智能门锁盖特曼 SL_LK_GTM - 同SL_LK_LS规范
    #   IO口功能定义完全同SL_LK_LS，参考上述详细说明
    "SL_LK_GTM",
    # 智能门锁西勒奇 SL_LK_AG - 同SL_LK_LS规范
    #   IO口功能定义完全同SL_LK_LS，参考上述详细说明
    "SL_LK_AG",
    # 智能门锁思哥 SL_LK_SG - 同SL_LK_LS规范
    #   IO口功能定义完全同SL_LK_LS，参考上述详细说明
    "SL_LK_SG",
    # 智能门锁耶鲁 SL_LK_YL - 同SL_LK_LS规范
    #   IO口功能定义完全同SL_LK_LS，参考上述详细说明
    "SL_LK_YL",
    # 智能门锁必达 SL_P_BDLK - 同SL_LK_LS规范
    #   IO口功能定义完全同SL_LK_LS，参考上述详细说明
    "SL_P_BDLK",
    # 智能门锁九万里 OD_JIUWANLI_LOCK1 - 同SL_LK_LS规范
    #   IO口功能定义完全同SL_LK_LS，参考上述详细说明
    "OD_JIUWANLI_LOCK1",
    # SWIFTE门锁模块 SL_LK_SWIFTE - 同SL_LK_LS规范
    #   IO口功能定义完全同SL_LK_LS，参考上述详细说明
    "SL_LK_SWIFTE",
    # 智能门锁C100 SL_LK_TY - 同SL_LK_LS规范
    #   IO口功能定义完全同SL_LK_LS，参考上述详细说明
    "SL_LK_TY",
    # 智能门锁C200/C210 SL_LK_DJ - 参见VERSIONED_DEVICE_TYPES中的版本区分
    # 提示: 需要查看设备的fullCls属性区分版本
    # fullCls="SL_LK_DJ_V1"为C210版本, fullCls="SL_LK_DJ_V2"为C200版本
    #   IO口功能定义完全同SL_LK_LS，参考上述详细说明
    #   版本差异：C210和C200在功能上基本相同，主要区别在于外观和部分硬件配置
    "SL_LK_DJ",
    # 注意：文档中提到的LK_YL可能是SL_LK_YL的别名或旧版本
}
# 门锁解锁方式映射
UNLOCK_METHOD = {
    0: "None",
    1: "Password",
    2: "Fingerprint",
    3: "NFC",
    4: "Keys",
    5: "Remote",
    6: "12V Signal",
    7: "App",
    8: "Bluetooth",
    9: "Manual",
    15: "Error",
}

# ================= 平台聚合已废弃 (Platform Aggregation Deprecated) =================
# 注意：ALL_*_TYPES聚合列表已被完全废弃并移除。
#
# 🔄 **新的设备平台映射架构**：
# - 使用 helpers.py 中的 get_device_platform_mapping() 函数获取设备支持的平台
# - 基于 MULTI_PLATFORM_DEVICE_MAPPING 和 STAR_SERIES_IO_MAPPING 精确映射
# - 支持单设备多平台，避免了设备重复定义问题
# - 动态分类设备（如SL_NATURE、SL_P）根据IO状态自动判断平台归属
#
# 📋 **迁移指南**：
# - 旧代码: `if device_type in ALL_SWITCH_TYPES`
# - 新代码: `platforms = get_device_platform_mapping(device); if Platform.SWITCH in platforms`
#
# 🔍 **技术优势**：
# - ✅ 消除设备重复定义
# - ✅ 支持多平台设备（如SL_OL_W：开关+灯光）
# - ✅ 动态分类（如超能面板根据配置变化功能）
# - ✅ IO口级别的精确控制
# - ✅ 更好的可维护性和扩展性

# ================= 设备IO特征映射 (Device IO Feature Mapping) =================
# 基于设备实际IO口功能的平台支持映射，解决多平台设备问题
# 每个设备只在一个主要集合中定义，但可支持多个平台

MULTI_PLATFORM_DEVICE_MAPPING = {
    # 入墙插座 - 同时支持开关和灯光平台
    "SL_OL_W": {
        "switch": {"io": "L1", "description": "插座开关控制"},
        "light": {"io": ["dark", "bright"], "description": "指示灯颜色和动态效果"},
    },
    # 计量插座 - 同时支持开关和传感器平台
    "SL_OE_3C": {
        "switch": {"io": ["P1", "P4"], "description": "插座开关控制和功率门限控制"},
        "sensor": {
            "io": ["P2", "P3", "P4"],
            "description": "用电量、功率、功率门限监测",
        },
    },
    "SL_OE_DE": {
        "switch": {"io": ["P1", "P4"], "description": "插座开关控制和功率门限控制"},
        "sensor": {
            "io": ["P2", "P3", "P4"],
            "description": "用电量、功率、功率门限监测",
        },
    },
    "SL_OE_W": {
        "switch": {"io": ["P1", "P4"], "description": "插座开关控制和功率门限控制"},
        "sensor": {
            "io": ["P2", "P3", "P4"],
            "description": "用电量、功率、功率门限监测",
        },
    },
    # 车库门控制器 - 同时支持覆盖物和灯光平台
    "SL_ETDOOR": {
        "cover": {"io": ["P2", "P3"], "description": "车库门位置控制和状态"},
        "light": {"io": "P1", "description": "车库门照明灯控制"},
    },
    # 流光窗帘开关 - 同时支持覆盖物和灯光平台
    "SL_CN_IF": {
        "cover": {"io": ["P1", "P2", "P3"], "description": "窗帘开启、关闭、停止控制"},
        "light": {"io": ["P4", "P5", "P6"], "description": "指示灯RGBW颜色控制"},
    },
    # 窗帘控制开关 - 同时支持覆盖物和灯光平台
    "SL_SW_WIN": {
        "cover": {"io": ["OP", "CL", "ST"], "description": "窗帘开启、关闭、停止控制"},
        "light": {"io": ["dark", "bright"], "description": "指示灯亮度控制"},
    },
    # 超能面板 - 动态分类：开关版 vs 温控版
    # 注意：这个由 helpers.py 中的动态检测逻辑处理
    "SL_NATURE": {
        "dynamic": True,
        "switch_mode": {
            "condition": "P5&0xFF==1",
            "io": ["P1", "P2", "P3"],
            "sensor_io": ["P4", "P5"],
        },
        "climate_mode": {
            "condition": "P5&0xFF in [3,6]",
            "io": ["P1", "P6", "P7", "P8", "P9", "P10"],
            "sensor_io": ["P4", "P5"],
        },
    },
    # 通用控制器 - 动态分类：二元传感器/窗帘/开关
    "SL_P": {
        "dynamic": True,
        "binary_sensor_mode": {
            "condition": "(P1>>24)&0xE==0",
            "io": ["P1", "P5", "P6", "P7"],
        },
        "cover_mode": {
            "condition": "(P1>>24)&0xE in [2,4]",
            "io": ["P1", "P2", "P3", "P4"],
        },
        "switch_mode": {
            "condition": "(P1>>24)&0xE in [8,10]",
            "io": ["P1", "P2", "P3", "P4"],
        },
    },
    # 通用控制器HA版 - 在SL_P基础上额外支持P8/P9/P10独立开关
    "SL_JEMA": {
        "dynamic": True,
        "binary_sensor_mode": {
            "condition": "(P1>>24)&0xE==0",
            "io": ["P1", "P5", "P6", "P7"],
        },
        "cover_mode": {
            "condition": "(P1>>24)&0xE in [2,4]",
            "io": ["P1", "P2", "P3", "P4"],
        },
        "switch_mode": {
            "condition": "(P1>>24)&0xE in [8,10]",
            "io": ["P1", "P2", "P3", "P4"],
        },
        "always_switch": {
            "io": ["P8", "P9", "P10"],
            "description": "HA独立开关端口，不受P1工作模式影响",
        },
    },
    # ================= 恒星/辰星/极星系列设备 (Star Series Devices) =================
    # 这些设备既有开关功能也有电量监测传感器功能
    "SL_SW_ND1": {
        "switch": {"io": ["P1"], "description": "单键开关控制"},
        "sensor": {"io": ["P2"], "description": "电量监测"},
    },
    "SL_MC_ND1": {
        "switch": {"io": ["P1"], "description": "单键开关伴侣控制"},
        "sensor": {"io": ["P2"], "description": "电量监测"},
    },
    "SL_SW_ND2": {
        "switch": {"io": ["P1", "P2"], "description": "双键开关控制"},
        "sensor": {"io": ["P3"], "description": "电量监测"},
    },
    "SL_MC_ND2": {
        "switch": {"io": ["P1", "P2"], "description": "双键开关伴侣控制"},
        "sensor": {"io": ["P3"], "description": "电量监测"},
    },
    "SL_SW_ND3": {
        "switch": {"io": ["P1", "P2", "P3"], "description": "三键开关控制"},
        "sensor": {"io": ["P4"], "description": "电量监测"},
    },
    "SL_MC_ND3": {
        "switch": {"io": ["P1", "P2", "P3"], "description": "三键开关伴侣控制"},
        "sensor": {"io": ["P4"], "description": "电量监测"},
    },
    # ================= 开关设备 (Switch Devices) =================
    # 基础智能插座
    "SL_OL": {
        "switch": {"io": "O", "description": "插座开关控制"},
    },
    # 标准开关系列 - 传统流光开关
    "SL_SW_IF1": {
        "switch": {"io": "L1", "description": "单路开关控制"},
        "light": {"io": ["dark", "bright"], "description": "指示灯亮度控制"},
    },
    "SL_SW_IF2": {
        "switch": {"io": ["L1", "L2"], "description": "双路开关控制"},
        "light": {
            "io": ["dark1", "dark2", "bright1", "bright2"],
            "description": "指示灯亮度控制",
        },
    },
    "SL_SW_IF3": {
        "switch": {"io": ["L1", "L2", "L3"], "description": "三路开关控制"},
        "light": {
            "io": ["dark1", "dark2", "dark3", "bright1", "bright2", "bright3"],
            "description": "指示灯亮度控制",
        },
    },
    # 塞纳/格致开关系列
    "SL_SW_FE1": {
        "switch": {"io": "L1", "description": "单路开关控制"},
        "light": {"io": ["dark", "bright"], "description": "指示灯亮度控制"},
    },
    "SL_SW_FE2": {
        "switch": {"io": ["L1", "L2"], "description": "双路开关控制"},
        "light": {
            "io": ["dark1", "dark2", "bright1", "bright2"],
            "description": "指示灯亮度控制",
        },
    },
    # 橙朴流光开关系列
    "SL_SW_CP1": {
        "switch": {"io": "L1", "description": "单路开关控制"},
        "light": {"io": ["dark", "bright"], "description": "指示灯亮度控制"},
    },
    "SL_SW_CP2": {
        "switch": {"io": ["L1", "L2"], "description": "双路开关控制"},
        "light": {
            "io": ["dark1", "dark2", "bright1", "bright2"],
            "description": "指示灯亮度控制",
        },
    },
    "SL_SW_CP3": {
        "switch": {"io": ["L1", "L2", "L3"], "description": "三路开关控制"},
        "light": {
            "io": ["dark1", "dark2", "dark3", "bright1", "bright2", "bright3"],
            "description": "指示灯亮度控制",
        },
    },
    # 极星开关120V零火版系列
    "SL_SW_BS1": {
        "switch": {"io": "P1", "description": "单路开关控制"},
    },
    "SL_SW_BS2": {
        "switch": {"io": ["P1", "P2"], "description": "双路开关控制"},
    },
    "SL_SW_BS3": {
        "switch": {"io": ["P1", "P2", "P3"], "description": "三路开关控制"},
    },
    # 触摸开关/极星开关零火版系列
    "SL_SW_RC": {
        "switch": {"io": ["L1", "L2", "L3"], "description": "三路开关控制"},
        "light": {"io": ["dark", "bright"], "description": "指示灯亮度控制"},
    },
    # 单火流光开关系列
    "SL_SF_IF1": {
        "switch": {"io": "L1", "description": "单路开关控制"},
        "light": {"io": ["dark", "bright"], "description": "指示灯亮度控制"},
    },
    "SL_SF_IF2": {
        "switch": {"io": ["L1", "L2"], "description": "双路开关控制"},
        "light": {
            "io": ["dark1", "dark2", "bright1", "bright2"],
            "description": "指示灯亮度控制",
        },
    },
    "SL_SF_IF3": {
        "switch": {"io": ["L1", "L2", "L3"], "description": "三路开关控制"},
        "light": {
            "io": ["dark1", "dark2", "dark3", "bright1", "bright2", "bright3"],
            "description": "指示灯亮度控制",
        },
    },
    "SL_SF_RC": {
        "switch": {"io": ["L1", "L2", "L3"], "description": "三路开关控制"},
        "light": {"io": ["dark", "bright"], "description": "指示灯亮度控制"},
    },
    # 白玉/墨玉流光开关系列
    "SL_SW_RC1": {
        "switch": {"io": "L1", "description": "单路开关控制"},
        "light": {"io": ["dark", "bright"], "description": "指示灯亮度控制"},
    },
    "SL_SW_RC2": {
        "switch": {"io": ["L1", "L2"], "description": "双路开关控制"},
        "light": {
            "io": ["dark1", "dark2", "bright1", "bright2"],
            "description": "指示灯亮度控制",
        },
    },
    "SL_SW_RC3": {
        "switch": {"io": ["L1", "L2", "L3"], "description": "三路开关控制"},
        "light": {
            "io": ["dark1", "dark2", "dark3", "bright1", "bright2", "bright3"],
            "description": "指示灯亮度控制",
        },
    },
    # 极星流光开关系列
    "SL_SW_NS1": {
        "switch": {"io": "L1", "description": "单路开关控制"},
        "light": {"io": ["dark", "bright"], "description": "指示灯亮度控制"},
    },
    "SL_SW_NS2": {
        "switch": {"io": ["L1", "L2"], "description": "双路开关控制"},
        "light": {
            "io": ["dark1", "dark2", "bright1", "bright2"],
            "description": "指示灯亮度控制",
        },
    },
    "SL_SW_NS3": {
        "switch": {"io": ["L1", "L2", "L3"], "description": "三路开关控制"},
        "light": {
            "io": ["dark1", "dark2", "dark3", "bright1", "bright2", "bright3"],
            "description": "指示灯亮度控制",
        },
    },
    # 动态调光开关/星玉调光开关(可控硅) - 版本化设备，需要根据fullCls区分
    "SL_SW_DM1": {
        "versioned": True,
        "V1": {
            # SL_SW_DM1_V1 动态调光开关版本 - 具有传感器和智能控制功能
            "light": {"io": ["P1", "P2"], "description": "调光开关亮度和指示灯控制"},
            "binary_sensor": {"io": "P3", "description": "移动检测传感器"},
            "sensor": {
                "io": ["P4", "P5", "P6"],
                "description": "环境光照、调光设置和动态设置传感器",
            },
        },
        "V2": {
            # SL_SW_DM1_V2 星玉调光开关(可控硅)版本 - 基础调光功能
            "light": {"io": ["P1", "P2"], "description": "调光开关亮度和指示灯控制"},
        },
    },
    # 九路开关控制器
    "SL_P_SW": {
        "switch": {
            "io": ["P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8", "P9"],
            "description": "九路开关控制",
        },
    },
    # 按钮开关设备 - 版本化设备，需要根据fullCls区分
    "SL_SC_BB": {
        "versioned": True,
        "V1": {
            # SL_SC_BB_V1 基础随心按键 - 简单按键检测
            "switch": {"io": "B", "description": "按钮开关控制"},
            "binary_sensor": {"io": "B", "description": "按钮状态检测"},
            "sensor": {"io": "V", "description": "电量监测"},
        },
        "V2": {
            # SL_SC_BB_V2 高级随心按键 - 支持复杂手势识别
            "switch": {"io": "P1", "description": "按钮开关控制"},
            "binary_sensor": {"io": "P1", "description": "按钮状态检测"},
            "sensor": {"io": "P2", "description": "电量监测"},
        },
    },
    # SL_SC_BB_V2: 版本标识符,通过fullCls="SL_SC_BB_V2"区分版本,使用VERSIONED_DEVICE_TYPES处理
    # ================= 灯光设备 (Light Devices) =================
    # 白光调光灯
    "SL_SPWM": {
        "light": {"io": "P1", "description": "白光亮度控制"},
    },
    "SL_LI_WW": {
        "light": {"io": "_DIMMER", "description": "白光调光控制"},
    },
    # SL_LI_WW_V1: 版本标识符,通过fullCls="SL_LI_WW_V1"区分版本,使用基础设备类型处理
    # RGB/RGBW灯光设备
    "SL_SC_RGB": {
        "light": {"io": "RGB", "description": "RGB颜色控制"},
    },
    "SL_CT_RGBW": {
        "light": {"io": ["RGBW", "DYN"], "description": "RGBW颜色和动态效果控制"},
    },
    "SL_LI_RGBW": {
        "light": {"io": ["RGBW", "DYN"], "description": "RGBW颜色和动态效果控制"},
    },
    # Spot类型设备
    "SL_SPOT": {
        "light": {"io": "RGB", "description": "Spot RGB灯控制"},
    },
    "MSL_IRCTL": {
        "light": {"io": ["RGBW", "DYN"], "description": "Spot RGBW颜色和动态效果控制"},
    },
    "OD_WE_IRCTL": {
        "light": {"io": "RGB", "description": "Spot RGB灯控制"},
    },
    # 量子灯
    "OD_WE_QUAN": {
        "light": {"io": ["P1", "P2"], "description": "量子灯亮度和颜色控制"},
    },
    # ================= 覆盖物设备 (Cover Devices) =================
    # 杜亚窗帘系列 - 所有变体都使用P1(状态)+P2(控制)
    "SL_DOOYA": {
        "cover": {"io": ["P1", "P2"], "description": "杜亚窗帘位置状态和控制"},
    },
    # SL_DOOYA_V2~V9: 版本标识符,通过fullCls区分版本,使用基础设备类型SL_DOOYA处理
    # 其他窗帘设备
    # ================= 传感器设备 (Sensor Devices) =================
    # 环境传感器 - 多功能设备：既有环境传感器也有门磁功能
    "SL_SC_THL": {
        "sensor": {"io": ["T", "H", "Z", "V"], "description": "温湿度光照电量传感器"},
    },
    "SL_SC_BE": {
        "sensor": {"io": ["T", "H", "Z", "V"], "description": "环境传感器+电量"},
        # CUBE可能也有其他IO口，需要根据实际情况补充
    },
    # 空气质量传感器
    "SL_SC_CA": {
        "sensor": {
            "io": ["P1", "P2", "P3", "P4", "P5"],
            "description": "CO2传感器完整监测",
        },
    },
    "SL_SC_CQ": {
        "sensor": {
            "io": ["P1", "P2", "P3", "P4", "P5", "P6"],
            "description": "CO2+TVOC环境传感器完整监测",
        },
    },
    # 燃气传感器 - P1燃气浓度检测和告警,P2告警门限设置,P3警报音控制
    "SL_SC_CP": {
        "binary_sensor": {"io": "P1", "description": "燃气浓度告警检测"},
        "sensor": {"io": ["P1", "P2"], "description": "燃气浓度数值和告警门限监测"},
        "switch": {"io": "P3", "description": "燃气报警音控制"},
    },
    # 噪音传感器 - P1噪音检测和告警,P2告警门限,P3报警设置,P4噪音校正
    "SL_SC_CN": {
        "binary_sensor": {"io": "P1", "description": "噪音告警检测"},
        "sensor": {
            "io": ["P1", "P2", "P4"],
            "description": "噪音分贝、告警门限和校正值监测",
        },
        "switch": {"io": "P3", "description": "噪音报警设置控制"},
    },
    # 第三方电量计量器
    "ELIQ_EM": {
        "sensor": {"io": ["EPA", "EE", "EP"], "description": "ELIQ电量监测"},
    },
    "OD_WE_OT1": {
        "switch": {"io": "P1", "description": "海外版智能插座"},
    },
    "SL_OL_UK": {
        "switch": {"io": "O", "description": "英式插座开关"},
    },
    "SL_OL_3C": {
        "switch": {"io": "O", "description": "3C版插座开关"},
    },
    "SL_OL_UL": {
        "switch": {"io": "O", "description": "UL版插座开关"},
    },
    "SL_OL_DE": {
        "switch": {"io": "O", "description": "德式插座开关"},
    },
    "SL_BP_MZ": {
        "binary_sensor": {"io": "P1", "description": "PIR人体红外移动检测"},
        "sensor": {"io": ["P2", "P3"], "description": "环境光照和电量监测"},
    },
    "SL_SC_CM": {
        "binary_sensor": {"io": "P1", "description": "PIR人体红外检测"},
        "sensor": {"io": ["P3", "P4"], "description": "主电池电量和USB供电检测"},
    },
    "SL_SC_BG": {
        "binary_sensor": {
            "io": ["G", "B", "AXS"],
            "description": "门窗状态、按键和震动检测",
        },
        "sensor": {"io": "V", "description": "电量监测"},
    },
    "SL_SC_BM": {
        "binary_sensor": {"io": "M", "description": "CUBE动态感应器移动检测"},
        "sensor": {"io": "V", "description": "电量监测"},
    },
    "SL_SC_GS": {
        "binary_sensor": {"io": ["P1", "AXS"], "description": "门窗磁感应和震动检测"},
        "sensor": {"io": "V", "description": "电量监测"},
    },
    # ================= 温控设备 (Climate Devices) =================
    # 空调控制面板 - P1开关,P2模式,P3目标温度,P4风速,P6当前温度
    "SL_UACCB": {
        "climate": {"io": ["P1", "P2", "P3", "P4"], "description": "空调控制面板"},
        "sensor": {"io": "P6", "description": "当前温度监测"},
    },
    # 星玉地暖 - P1开关和温度限制,P2模式,P3阀门状态,P4/P9室内/底版温度,P8目标温度
    "SL_DN": {
        "climate": {"io": ["P1", "P2", "P8"], "description": "地暖温控系统"},
        "binary_sensor": {"io": "P3", "description": "地暖阀门状态"},
        "sensor": {"io": ["P4", "P9"], "description": "室内温度和底版温度监测"},
    },
    # 风机盘管 - P1系统配置,P2阀门控制,P4目标温度,P5室内温度
    "SL_CP_AIR": {
        "climate": {"io": ["P1", "P2", "P4"], "description": "风机盘管控制"},
        "sensor": {"io": "P5", "description": "室内温度监测"},
        "binary_sensor": {"io": "P3", "description": "风速状态"},
    },
    # 第三方新风系统
    "V_FRESH_P": {
        "climate": {"io": ["O", "MODE", "F1", "F2"], "description": "新风系统控制"},
        "sensor": {"io": "T", "description": "环境温度监测"},
    },
    # 深圳建设新风
    "V_SZJSXR_P": {
        "climate": {"io": ["O", "MODE"], "description": "新风系统控制"},
        "sensor": {"io": "T", "description": "环境温度监测"},
    },
    # YORK温控器
    "V_T8600_P": {
        "climate": {"io": ["O", "MODE"], "description": "温控器控制"},
        "sensor": {"io": "T", "description": "环境温度监测"},
    },
    # ================= 开关控制器设备 =================
    # 开关智控器 - P2开关控制
    "SL_S": {
        "switch": {"io": "P2", "description": "通用开关控制"},
    },
    # 星玉情景面板 - P1~P6情景开关,P7开关控制器配置
    "SL_SW_NS6": {
        "switch": {
            "io": ["P1", "P2", "P3", "P4", "P5", "P6", "P7"],
            "description": "情景开关面板",
        },
    },
    # 奇点开关模块系列
    "SL_SW_MJ1": {
        "switch": {"io": "P1", "description": "单路开关模块"},
    },
    "SL_SW_MJ2": {
        "switch": {"io": ["P1", "P2"], "description": "双路开关模块"},
    },
    "SL_SW_MJ3": {
        "switch": {"io": ["P1", "P2", "P3"], "description": "三路开关模块"},
    },
    # 虚拟开关
    "V_IND_S": {
        "switch": {"io": "P1", "description": "虚拟开关控制"},
    },
    # ================= 灯光设备补充 =================
    # SL_LI_WW_V2: 版本标识符,通过fullCls="SL_LI_WW_V2"区分版本,使用基础设备类型处理
    # "SL_LI_WW_V2": {"light": {"io": "_DIMMER", "description": "0-10V调光调色控制"}},  # 移除版本设备,使用基础设备类型处理
    # 星玉调光开关0-10V
    "SL_SW_WW": {
        "light": {"io": ["P1", "P2"], "description": "星玉调光开关亮度和色温控制"},
    },
    # 红外吸顶灯 - P1亮度,P2色温,P3夜灯亮度
    "SL_LI_IR": {
        "light": {"io": ["P1", "P2", "P3"], "description": "红外吸顶灯三色控制"},
    },
    # 调光壁灯 - P1亮度控制,P2移动检测,P3环境光照
    "SL_LI_GD1": {
        "light": {"io": "P1", "description": "调光壁灯亮度控制"},
        "binary_sensor": {"io": "P2", "description": "PIR移动检测"},
        "sensor": {"io": "P3", "description": "环境光照监测"},
    },
    # 花园地灯 - P1颜色设置,P2环境光照,P3充电指示,P4电量
    "SL_LI_UG1": {
        "light": {"io": "P1", "description": "花园地灯RGBW颜色控制"},
        "sensor": {"io": ["P2", "P4"], "description": "环境光照和电量监测"},
        "binary_sensor": {"io": "P3", "description": "太阳能充电状态"},
    },
    # ================= 传感器设备补充 =================
    # 甲醛传感器 - P1甲醛浓度检测和告警,P2告警门限,P3警报音控制
    "SL_SC_CH": {
        "binary_sensor": {"io": "P1", "description": "甲醛浓度告警"},
        "sensor": {"io": ["P1", "P2"], "description": "甲醛浓度数值和告警门限监测"},
        "switch": {"io": "P3", "description": "甲醛报警音控制"},
    },
    # 语音小Q
    "SL_SC_CV": {
        "sensor": {"io": ["T", "H"], "description": "语音设备环境监测"},
    },
    # 空气净化器 - O开关,RM运行模式,T/H/PM/FL/UV各种传感器
    "OD_MFRESH_M8088": {
        "switch": {"io": "O", "description": "空气净化器开关"},
        "sensor": {
            "io": ["T", "H", "PM", "FL", "UV", "RM"],
            "description": "空气质量和滤芯寿命监测",
        },
    },
    # ================= 报警设备 =================
    # 智能报警器 - P1播放控制,P2音量控制
    "SL_ALM": {
        "switch": {"io": ["P1", "P2"], "description": "报警器播放和音量控制"},
    },
    # 多功能报警器
    "LSSSMINIV1": {
        "switch": {"io": "P1", "description": "多功能报警器控制"},
    },
    # ================= 云防系列补充 =================
    # 云防室内警铃 - SR警铃播放,T温度,V电量,TR防拆,P1报警设置
    "SL_DF_SR": {
        "binary_sensor": {"io": ["SR", "TR"], "description": "警铃播放和防拆状态"},
        "sensor": {"io": ["T", "V"], "description": "温度和电量监测"},
        "switch": {"io": "P1", "description": "报警设置控制"},
    },
    # 云防动态感应器 - M移动检测,T温度,V电量,TR防拆
    "SL_DF_MM": {
        "binary_sensor": {"io": ["M", "TR"], "description": "移动检测和防拆状态"},
        "sensor": {"io": ["T", "V"], "description": "温度和电量监测"},
    },
    # 云防遥控器 - eB1~eB4按键检测,V电量
    "SL_DF_BB": {
        "binary_sensor": {
            "io": ["eB1", "eB2", "eB3", "eB4"],
            "description": "遥控器按键检测",
        },
        "sensor": {"io": "V", "description": "电量监测"},
    },
    # ================= 窗帘设备补充 =================
    # 格致/塞纳三键窗帘 - P1开,P2停,P3关
    "SL_CN_FE": {
        "cover": {"io": ["P1", "P2", "P3"], "description": "三键窗帘控制"},
    },
    # ================= 红外设备补充 =================
    # 红外模块/超级碗Mini版
    "SL_P_IR": {
        "remote": {"io": "P1", "description": "红外控制功能"},
    },
    # SL_P_IR_V2: 版本标识符,通过fullCls="SL_P_IR_V2"区分版本,使用VERSIONED_DEVICE_TYPES处理
    # "SL_P_IR_V2": {"remote": {"io": "P1"}, "binary_sensor": {"io": "P2"}},  # 移除版本设备,使用VERSIONED_DEVICE_TYPES处理
    # ================= 第三方485设备 =================
    # 485控制器 - 支持多种传感器和控制器
    "V_485_P": {
        "sensor": {
            "io": [
                "P1",
                "T",
                "H",
                "PM",
                "PMx",
                "CO2PPM",
                "TVOC",
                "COPPM",
                "CH20PPM",
                "O2VOL",
                "NH3PPM",
                "H2SPPM",
                "PHM",
                "SMOKE",
                "EP",
                "EPF",
                "EPFx",
                "EF",
                "EFx",
                "EI",
                "EIx",
                "EV",
                "EVx",
                "EE",
                "EEx",
            ],
            "description": "485多功能传感器",
        },
        "switch": {"io": ["Lx"], "description": "485开关控制"},
    },
    # DLT电量计量器 - EE用电量,EP功率
    "V_DLT645_P": {
        "sensor": {"io": ["EE", "EP"], "description": "DLT电量监测"},
    },
    # 第三方设备
    "V_DUNJIA_P": {
        "binary_sensor": {"io": "P1", "description": "人脸识别门锁状态"},
    },
    "V_HG_L": {
        "switch": {"io": "P1", "description": "极速开关组"},
    },
    "V_HG_XX": {
        "sensor": {"io": "P1", "description": "极速虚拟设备"},
    },
    # ================= 摄像头设备（仅传感器功能）=================
    # 通用摄像头 - M移动检测
    "cam": {
        "binary_sensor": {"io": "M", "description": "摄像头移动检测"},
    },
    # FRAME摄像头 - M移动检测,V电压,CFST摄像头状态
    "LSCAM:LSCAMV1": {
        "binary_sensor": {"io": "M", "description": "摄像头移动检测"},
        "sensor": {"io": ["V", "CFST"], "description": "电量和摄像头状态监测"},
    },
    # 户外摄像头系列
    "LSCAM:LSICAMEZ1": {
        "binary_sensor": {"io": "M", "description": "户外摄像头移动检测"},
    },
    "LSCAM:LSICAMEZ2": {
        "binary_sensor": {"io": "M", "description": "户外摄像头移动检测"},
    },
    "LSCAM:LSICAMGOS1": {
        "binary_sensor": {"io": "M", "description": "高清摄像头移动检测"},
    },
    "LSCAM:LSLKCAMV1": {
        "binary_sensor": {"io": "M", "description": "视频门锁摄像头移动检测"},
    },
    # ================= 更多设备类型 =================
    # 恒星/辰星/极星系列已经在STAR_SERIES_IO_MAPPING中处理
    # ================= 二元传感器设备 (Binary Sensor Devices) =================
    # 门磁传感器
    "SL_SC_G": {
        "binary_sensor": {"io": "G", "description": "门窗开关状态"},
        "sensor": {"io": "V", "description": "电量监测"},
    },
    # 运动传感器
    "SL_SC_MHW": {
        "binary_sensor": {"io": "M", "description": "人体红外检测"},
        "sensor": {"io": "V", "description": "电量监测"},
    },
    # 水浸传感器
    "SL_SC_WA": {
        "binary_sensor": {"io": "WA", "description": "水浸状态检测"},
        "sensor": {"io": "V", "description": "电量监测"},
    },
    # 烟雾传感器
    "SL_P_A": {
        "binary_sensor": {"io": "P1", "description": "烟雾检测"},
        "sensor": {"io": "P2", "description": "电压监测"},
    },
    # 雷达传感器
    "SL_P_RM": {
        "binary_sensor": {"io": "P1", "description": "雷达人体检测"},
        "sensor": {"io": "P2", "description": "雷达参数配置监测"},
    },
    # 云防系列传感器
    "SL_DF_GG": {
        "binary_sensor": {"io": ["A", "A2", "TR"], "description": "云防门窗检测和防拆"},
        "sensor": {"io": ["T", "V"], "description": "云防环境温度和电量监测"},
    },
    # ================= 智能锁设备 (Lock Devices) =================
    "SL_LK_LS": {
        "binary_sensor": {
            "io": ["EVTLO", "ALM"],
            "description": "锁状态和报警检测",
        },
        "sensor": {
            "io": ["BAT", "EVTOP", "HISLK"],
            "description": "电池电量、操作记录和历史开锁监测",
        },
    },
    "SL_LK_GTM": {
        "binary_sensor": {
            "io": ["EVTLO", "ALM"],
            "description": "锁状态和报警检测",
        },
        "sensor": {
            "io": ["BAT", "EVTOP", "HISLK"],
            "description": "电池电量、操作记录和历史开锁监测",
        },
    },
    "SL_LK_AG": {
        "binary_sensor": {
            "io": ["EVTLO", "ALM"],
            "description": "锁状态和报警检测",
        },
        "sensor": {
            "io": ["BAT", "EVTOP", "HISLK"],
            "description": "电池电量、操作记录和历史开锁监测",
        },
    },
    "SL_LK_SG": {
        "binary_sensor": {
            "io": ["EVTLO", "ALM"],
            "description": "锁状态和报警检测",
        },
        "sensor": {
            "io": ["BAT", "EVTOP", "HISLK"],
            "description": "电池电量、操作记录和历史开锁监测",
        },
    },
    "SL_LK_YL": {
        "binary_sensor": {
            "io": ["EVTLO", "ALM"],
            "description": "锁状态和报警检测",
        },
        "sensor": {
            "io": ["BAT", "EVTOP", "HISLK"],
            "description": "电池电量、操作记录和历史开锁监测",
        },
    },
    "SL_P_BDLK": {
        "binary_sensor": {
            "io": ["EVTLO", "ALM"],
            "description": "锁状态和报警检测",
        },
        "sensor": {
            "io": ["BAT", "EVTOP", "HISLK"],
            "description": "电池电量、操作记录和历史开锁监测",
        },
    },
    "OD_JIUWANLI_LOCK1": {
        "binary_sensor": {
            "io": ["EVTLO", "ALM"],
            "description": "锁状态和报警检测",
        },
        "sensor": {
            "io": ["BAT", "EVTOP", "HISLK"],
            "description": "电池电量、操作记录和历史开锁监测",
        },
    },
    "SL_LK_SWIFTE": {
        "binary_sensor": {
            "io": ["EVTLO", "ALM"],
            "description": "锁状态和报警检测",
        },
        "sensor": {
            "io": ["BAT", "EVTOP", "HISLK"],
            "description": "电池电量、操作记录和历史开锁监测",
        },
    },
    "SL_LK_TY": {
        "binary_sensor": {
            "io": ["EVTLO", "ALM", "EVTBEL"],
            "description": "C100门锁状态、报警和门铃检测",
        },
        "sensor": {
            "io": ["BAT", "HISLK"],
            "description": "C100门锁电池电量和历史开锁监测",
        },
    },
    "SL_LK_DJ": {
        "binary_sensor": {
            "io": ["EVTLO", "ALM", "EVTBEL"],
            "description": "锁状态、报警和门铃检测",
        },
        "sensor": {
            "io": ["BAT", "EVTOP", "HISLK"],
            "description": "电池电量、操作记录和历史开锁监测",
        },
    },
    # ================= 温控设备 (Climate Devices) =================
    # 地暖温控器
    "SL_CP_DN": {
        "climate": {
            "io": ["P1", "P2", "P3"],
            "description": "地暖系统配置、继电器控制和目标温度设置",
        },
        "sensor": {"io": ["P4", "P5"], "description": "室内温度和底版温度监测"},
    },
    # 温控阀门
    "SL_CP_VL": {
        "climate": {"io": ["P1"], "description": "温控阀门开关和系统配置"},
        "binary_sensor": {
            "io": ["P2", "P3", "P5"],
            "description": "双路阀门状态和告警检测",
        },
        "sensor": {"io": ["P4", "P6"], "description": "当前温度和电量监测"},
    },
    # 星玉面板
    "SL_FCU": {
        "climate": {
            "io": ["P1", "P6", "P7", "P8", "P9", "P10"],
            "description": "风机盘管控制",
        },
        "binary_sensor": {"io": ["P2", "P3"], "description": "阀门开关检测"},
        "sensor": {"io": ["P4"], "description": "温度监测"},
    },
    # 新风系统
    "SL_TR_ACIPM": {
        "climate": {
            "io": ["P1", "P2", "P3"],
            "description": "新风系统配置、风速控制和VOC阈值设置",
        },
        "sensor": {
            "io": ["P4", "P5", "P6"],
            "description": "VOC浓度、PM2.5浓度和温度传感器",
        },
    },
    # 空调面板
    "V_AIR_P": {
        "climate": {"io": ["O", "MODE", "F", "tT"], "description": "空调控制"},
        "sensor": {"io": "T", "description": "温度传感器"},
    },
}

# --- 动态分类设备列表 (Dynamic Classification Devices) ---
# 这些设备的平台归属由 helpers.py 中的逻辑决定
DYNAMIC_CLASSIFICATION_DEVICES = {
    "SL_NATURE",  # 根据P5值决定是开关版还是温控版
    "SL_P",  # 根据P1工作模式决定功能
    "SL_JEMA",  # 同SL_P，但额外支持P8/P9/P10独立开关
}

# --- Home Assistant 支持的平台列表 ---
SUPPORTED_PLATFORMS = {
    Platform.SWITCH,
    Platform.BINARY_SENSOR,
    Platform.SENSOR,
    Platform.COVER,
    Platform.LIGHT,
    Platform.CLIMATE,
    Platform.REMOTE,
    # Platform.CAMERA, # 摄像头平台当前未实现
}

# ================= 技术定义 (Technical Constants) =================

# 第三方设备版本映射 - 参考官方文档附录3.6
# 当设备通过通用控制器接入第三方设备时，可根据ver值判别具体设备型号
THIRD_PARTY_DEVICES = {
    "V_AIR_P": {
        "0.0.0.1": {
            "code": "000001",
            "model": "DTA116A621",
            "name": "大金空调DTA116A621",
        },
        "0.0.0.2": {"code": "000002", "model": "KRAVEN_VRV", "name": "空调VRV控制器"},
        "0.0.0.7": {"code": "000007", "model": "TM8X", "name": "特灵"},
        "0.0.0.10": {"code": "00000A", "model": "KL420", "name": "开利420C"},
        "0.0.0.15": {
            "code": "00000F",
            "model": "MEDIA-CCM18",
            "name": "美的多联机MODBUS网关-CCM18",
        },
        "0.0.0.17": {
            "code": "000011",
            "model": "PHNIX-ST800",
            "name": "芬尼ST800二合一温控面板",
        },
        "0.0.0.18": {
            "code": "000012",
            "model": "SHINEFAN-G9",
            "name": "祥帆新风G9面板",
        },
        "0.0.0.19": {
            "code": "000013",
            "model": "TCB-IFMB646TLE",
            "name": "东芝空调网关TCB-IFMB646TLE",
        },
        "0.0.0.21": {
            "code": "000015",
            "model": "THT420B",
            "name": "开利空调面板THT420B",
        },
        "0.0.0.24": {
            "code": "000018",
            "model": "NetproDual",
            "name": "NetPro Dual DAIKIN",
        },
        "0.0.0.31": {"code": "00001F", "model": "CLP5DO", "name": "三恒系统"},
    },
    "V_FRESH_P": {
        "0.0.0.3": {"code": "000003", "model": "KV11_RTU", "name": "艾弗纳KV11"},
        "0.0.0.8": {"code": "000008", "model": "CA-S2", "name": "森德"},
        "0.0.0.22": {
            "code": "000016",
            "model": "NAVIEN-TAC550",
            "name": "NAVIEN新风主机NAVIEN-TAC550",
        },
        "0.0.0.23": {
            "code": "000017",
            "model": "KD-1-E",
            "name": "兰舍新风控制器KD-1-E",
        },
        "0.0.0.31": {"code": "00001F", "model": "CLP5DO", "name": "三恒系统"},
    },
    "V_485_P": {
        "0.0.0.12": {
            "code": "00000C",
            "model": "RY-A101",
            "name": "气体压力传感器RY_A101",
        },
        "0.0.0.13": {"code": "00000D", "model": "KL-19XR", "name": "KL-19XR"},
        "0.0.0.25": {"code": "000019", "model": "GD-H2S", "name": "GD-H2S"},
        "0.0.0.26": {
            "code": "00001A",
            "model": "HQ100-S12",
            "name": "智能照明控制模块HQ100-S12",
        },
        "0.0.0.27": {"code": "00001B", "model": "DTSR958", "name": "导轨电能表"},
        "0.0.0.28": {
            "code": "00001C",
            "model": "ZXB1L-125",
            "name": "智能断路器ZXB1L-125",
        },
        "0.0.0.29": {
            "code": "00001D",
            "model": "ZXB1L-3-125",
            "name": "智能断路器3相ZXB1L-3-125",
        },
        "0.0.0.30": {
            "code": "00001E",
            "model": "HD120A16GK",
            "name": "HDHK智能电流采集器HD120A16GK",
        },
        "0.0.0.32": {
            "code": "000020",
            "model": "BF-12LI",
            "name": "BF-12LI智能采集模块",
        },
    },
    "V_DLT645_P": {
        "0.0.0.6": {"code": "000006", "model": "DLT645", "name": "DLT645"},
    },
}

# ================= IO 命令类型常量 (IO Command Type Constants) =================

# IO值类型定义 - 参考官方文档附录3.5
# TYPE定义中的重要常量，用于正确解析IO数据
IO_TYPE_FLOAT_MASK = 0x7E  # 用于判断是否为浮点类型
IO_TYPE_FLOAT_VALUE = 0x02  # 浮点类型标识
IO_TYPE_EXCEPTION = 0x1E  # 异常数据类型

# 精度相关的位掩码
IO_TYPE_PRECISION_MASK = 0x78
IO_TYPE_PRECISION_BASE = 0x08
IO_TYPE_PRECISION_BITS = 0x06

# IO数据流向定义 - 参考官方文档3.5.1 TYPE定义
IO_DIRECTION_INPUT = 0x00  # bit7=0表示输入
IO_DIRECTION_OUTPUT = 0x80  # bit7=1表示输出

# IO命令类型定义 - 参考官方文档附录3.1
# 这些命令类型用于设备的 type 控制
CMD_TYPE_ON = 0x81  # 通用开启命令
CMD_TYPE_OFF = 0x80  # 通用关闭命令
CMD_TYPE_PRESS = 0x89  # 点动命令
CMD_TYPE_SET_VAL = 0xCF  # 设置数值 (如亮度、窗帘位置)
CMD_TYPE_SET_CONFIG = 0xCE  # 设置配置/模式 (如空调模式、风速)
CMD_TYPE_SET_TEMP_DECIMAL = 0x88  # 设置温度 (值为实际温度*10)
CMD_TYPE_SET_RAW_ON = 0xFF  # 开灯亮度/配置设置开始(颜色、动态、配置值等)
CMD_TYPE_SET_RAW_OFF = 0xFE  # 关灯亮度设置/配置设置停止（颜色、动态、配置值等）
CMD_TYPE_SET_TEMP_FCU = 0x89  # FCU温控器设置温度的特殊命令码

# ================= 动态效果映射 (Dynamic Effects Mappings) =================
# --- 通用动态效果 ---
# 动态颜色（DYN）定义 - 参考官方文档附录3.2
# 这些值用于设备的动态颜色效果，如彩灯、开关指示灯等
DYN_EFFECT_MAP = {
    "青草": 0x8218CC80,
    "海浪": 0x8318CC80,
    "深蓝山脈": 0x8418CC80,
    "紫色妖姬": 0x8518CC80,
    "树莓": 0x8618CC80,
    "橙光": 0x8718CC80,
    "秋实": 0x8818CC80,
    "冰淇淋": 0x8918CC80,
    "高原": 0x8020CC80,
    "披萨": 0x8120CC80,
    "果汁": 0x8A20CC80,
    "温暖小屋": 0x8B30CC80,
    "魔力红": 0x9318CC80,
    "光斑": 0x9518CC80,
    "蓝粉知己": 0x9718CC80,
    "晨曦": 0x9618CC80,
    "木槿": 0x9818CC80,
    "缤纷时代": 0x9918CC80,
    "天上人间": 0xA318CC80,
    "魅蓝": 0xA718CC80,
    "炫红": 0xA918CC80,
}
# 量子灯特殊（DYN）定义 - 参考官方文档附录3.3
# 量子灯专用的特殊动态效果
# --- 量子灯特殊动态效果 ---
QUANTUM_EFFECT_MAP = {
    "马戏团": 0x04810130,
    "北极光": 0x04C40600,
    "黑凤梨": 0x03BC0190,
    "十里桃花": 0x04940800,
    "彩虹糖": 0x05BD0690,
    "云起": 0x04970400,
    "日出印象": 0x01C10A00,
    "马卡龙": 0x049A0E00,
    "光盘时代": 0x049A0000,
    "动感光波": 0x0213A400,
    "圣诞节": 0x068B0900,
    "听音变色": 0x07BD0990,  # 第二代量子灯才支持
}

# 将动态效果和量子灯光效果映射合并
DYN_EFFECT_LIST = list(DYN_EFFECT_MAP.keys())
ALL_EFFECT_MAP = {**DYN_EFFECT_MAP, **QUANTUM_EFFECT_MAP}
ALL_EFFECT_LIST = list(ALL_EFFECT_MAP.keys())


# ================= 其他配置映射 =================

# 无位置窗帘配置映射 (用于将开/关/停动作映射到正确的IO口)
NON_POSITIONAL_COVER_CONFIG = {
    "SL_SW_WIN": {"open": "OP", "close": "CL", "stop": "ST"},
    "SL_P_V2": {
        "open": "P2",
        "close": "P3",
        "stop": "P4",
    },  # 移除版本设备,通过VERSIONED_DEVICE_TYPES处理
    "SL_CN_IF": {"open": "P1", "close": "P2", "stop": "P3"},
    "SL_CN_FE": {"open": "P1", "close": "P2", "stop": "P3"},
    # 通用控制器
    "SL_P": {"open": "P2", "close": "P3", "stop": "P4"},
    "SL_JEMA": {"open": "P2", "close": "P3", "stop": "P4"},
}

# 服务器区域选项 (用于配置流程)
LIFESMART_REGION_OPTIONS = [
    "cn0",
    "cn1",
    "cn2",
    "us",
    "eur",
    "jp",
    "apz",
    "AUTO",
]
